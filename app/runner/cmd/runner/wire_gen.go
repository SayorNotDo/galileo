// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"galileo/app/runner/internal/biz"
	"galileo/app/runner/internal/conf"
	"galileo/app/runner/internal/data"
	"galileo/app/runner/internal/server"
	"galileo/app/runner/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, auth *conf.Auth, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	cmdable := data.NewRedis(confData, logger)
	dataData, cleanup, err := data.NewData(confData, logger, cmdable)
	if err != nil {
		return nil, nil, err
	}
	runnerRepo := data.NewRunnerRepo(dataData, logger)
	runnerUseCase := biz.NewRunnerUseCase(runnerRepo, logger)
	runnerDataRepo := data.NewRunnerDataRepo(dataData, logger)
	runnerDataUseCase := biz.NewRunnerDataUseCase(runnerDataRepo, logger)
	runnerService := service.NewRunnerService(runnerUseCase, runnerDataUseCase, logger)
	httpServer := server.NewHTTPServer(confServer, auth, runnerService, logger)
	rabbitmqServer := server.NewRabbitServer(confServer, logger, runnerService)
	app := newApp(logger, httpServer, rabbitmqServer)
	return app, func() {
		cleanup()
	}, nil
}
