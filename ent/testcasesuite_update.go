// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"galileo/ent/predicate"
	"galileo/ent/testcase"
	"galileo/ent/testcasesuite"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestCaseSuiteUpdate is the builder for updating TestCaseSuite entities.
type TestCaseSuiteUpdate struct {
	config
	hooks    []Hook
	mutation *TestCaseSuiteMutation
}

// Where appends a list predicates to the TestCaseSuiteUpdate builder.
func (tcsu *TestCaseSuiteUpdate) Where(ps ...predicate.TestCaseSuite) *TestCaseSuiteUpdate {
	tcsu.mutation.Where(ps...)
	return tcsu
}

// SetName sets the "name" field.
func (tcsu *TestCaseSuiteUpdate) SetName(s string) *TestCaseSuiteUpdate {
	tcsu.mutation.SetName(s)
	return tcsu
}

// AddTestcaseIDs adds the "testcase" edge to the TestCase entity by IDs.
func (tcsu *TestCaseSuiteUpdate) AddTestcaseIDs(ids ...int64) *TestCaseSuiteUpdate {
	tcsu.mutation.AddTestcaseIDs(ids...)
	return tcsu
}

// AddTestcase adds the "testcase" edges to the TestCase entity.
func (tcsu *TestCaseSuiteUpdate) AddTestcase(t ...*TestCase) *TestCaseSuiteUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcsu.AddTestcaseIDs(ids...)
}

// Mutation returns the TestCaseSuiteMutation object of the builder.
func (tcsu *TestCaseSuiteUpdate) Mutation() *TestCaseSuiteMutation {
	return tcsu.mutation
}

// ClearTestcase clears all "testcase" edges to the TestCase entity.
func (tcsu *TestCaseSuiteUpdate) ClearTestcase() *TestCaseSuiteUpdate {
	tcsu.mutation.ClearTestcase()
	return tcsu
}

// RemoveTestcaseIDs removes the "testcase" edge to TestCase entities by IDs.
func (tcsu *TestCaseSuiteUpdate) RemoveTestcaseIDs(ids ...int64) *TestCaseSuiteUpdate {
	tcsu.mutation.RemoveTestcaseIDs(ids...)
	return tcsu
}

// RemoveTestcase removes "testcase" edges to TestCase entities.
func (tcsu *TestCaseSuiteUpdate) RemoveTestcase(t ...*TestCase) *TestCaseSuiteUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcsu.RemoveTestcaseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcsu *TestCaseSuiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, TestCaseSuiteMutation](ctx, tcsu.sqlSave, tcsu.mutation, tcsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcsu *TestCaseSuiteUpdate) SaveX(ctx context.Context) int {
	affected, err := tcsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcsu *TestCaseSuiteUpdate) Exec(ctx context.Context) error {
	_, err := tcsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsu *TestCaseSuiteUpdate) ExecX(ctx context.Context) {
	if err := tcsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcsu *TestCaseSuiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(testcasesuite.Table, testcasesuite.Columns, sqlgraph.NewFieldSpec(testcasesuite.FieldID, field.TypeInt))
	if ps := tcsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcsu.mutation.Name(); ok {
		_spec.SetField(testcasesuite.FieldName, field.TypeString, value)
	}
	if tcsu.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcasesuite.TestcaseTable,
			Columns: []string{testcasesuite.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsu.mutation.RemovedTestcaseIDs(); len(nodes) > 0 && !tcsu.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcasesuite.TestcaseTable,
			Columns: []string{testcasesuite.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsu.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcasesuite.TestcaseTable,
			Columns: []string{testcasesuite.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcasesuite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcsu.mutation.done = true
	return n, nil
}

// TestCaseSuiteUpdateOne is the builder for updating a single TestCaseSuite entity.
type TestCaseSuiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestCaseSuiteMutation
}

// SetName sets the "name" field.
func (tcsuo *TestCaseSuiteUpdateOne) SetName(s string) *TestCaseSuiteUpdateOne {
	tcsuo.mutation.SetName(s)
	return tcsuo
}

// AddTestcaseIDs adds the "testcase" edge to the TestCase entity by IDs.
func (tcsuo *TestCaseSuiteUpdateOne) AddTestcaseIDs(ids ...int64) *TestCaseSuiteUpdateOne {
	tcsuo.mutation.AddTestcaseIDs(ids...)
	return tcsuo
}

// AddTestcase adds the "testcase" edges to the TestCase entity.
func (tcsuo *TestCaseSuiteUpdateOne) AddTestcase(t ...*TestCase) *TestCaseSuiteUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcsuo.AddTestcaseIDs(ids...)
}

// Mutation returns the TestCaseSuiteMutation object of the builder.
func (tcsuo *TestCaseSuiteUpdateOne) Mutation() *TestCaseSuiteMutation {
	return tcsuo.mutation
}

// ClearTestcase clears all "testcase" edges to the TestCase entity.
func (tcsuo *TestCaseSuiteUpdateOne) ClearTestcase() *TestCaseSuiteUpdateOne {
	tcsuo.mutation.ClearTestcase()
	return tcsuo
}

// RemoveTestcaseIDs removes the "testcase" edge to TestCase entities by IDs.
func (tcsuo *TestCaseSuiteUpdateOne) RemoveTestcaseIDs(ids ...int64) *TestCaseSuiteUpdateOne {
	tcsuo.mutation.RemoveTestcaseIDs(ids...)
	return tcsuo
}

// RemoveTestcase removes "testcase" edges to TestCase entities.
func (tcsuo *TestCaseSuiteUpdateOne) RemoveTestcase(t ...*TestCase) *TestCaseSuiteUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcsuo.RemoveTestcaseIDs(ids...)
}

// Where appends a list predicates to the TestCaseSuiteUpdate builder.
func (tcsuo *TestCaseSuiteUpdateOne) Where(ps ...predicate.TestCaseSuite) *TestCaseSuiteUpdateOne {
	tcsuo.mutation.Where(ps...)
	return tcsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcsuo *TestCaseSuiteUpdateOne) Select(field string, fields ...string) *TestCaseSuiteUpdateOne {
	tcsuo.fields = append([]string{field}, fields...)
	return tcsuo
}

// Save executes the query and returns the updated TestCaseSuite entity.
func (tcsuo *TestCaseSuiteUpdateOne) Save(ctx context.Context) (*TestCaseSuite, error) {
	return withHooks[*TestCaseSuite, TestCaseSuiteMutation](ctx, tcsuo.sqlSave, tcsuo.mutation, tcsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcsuo *TestCaseSuiteUpdateOne) SaveX(ctx context.Context) *TestCaseSuite {
	node, err := tcsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcsuo *TestCaseSuiteUpdateOne) Exec(ctx context.Context) error {
	_, err := tcsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsuo *TestCaseSuiteUpdateOne) ExecX(ctx context.Context) {
	if err := tcsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tcsuo *TestCaseSuiteUpdateOne) sqlSave(ctx context.Context) (_node *TestCaseSuite, err error) {
	_spec := sqlgraph.NewUpdateSpec(testcasesuite.Table, testcasesuite.Columns, sqlgraph.NewFieldSpec(testcasesuite.FieldID, field.TypeInt))
	id, ok := tcsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestCaseSuite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcasesuite.FieldID)
		for _, f := range fields {
			if !testcasesuite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcasesuite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcsuo.mutation.Name(); ok {
		_spec.SetField(testcasesuite.FieldName, field.TypeString, value)
	}
	if tcsuo.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcasesuite.TestcaseTable,
			Columns: []string{testcasesuite.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsuo.mutation.RemovedTestcaseIDs(); len(nodes) > 0 && !tcsuo.mutation.TestcaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcasesuite.TestcaseTable,
			Columns: []string{testcasesuite.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsuo.mutation.TestcaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   testcasesuite.TestcaseTable,
			Columns: []string{testcasesuite.TestcaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TestCaseSuite{config: tcsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcasesuite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcsuo.mutation.done = true
	return _node, nil
}
