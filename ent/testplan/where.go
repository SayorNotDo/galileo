// Code generated by ent, DO NOT EDIT.

package testplan

import (
	"galileo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldUpdatedBy, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldDescription, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldStartTime, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldDeadline, v))
}

// StatusUpdatedAt applies equality check predicate on the "status_updated_at" field. It's identical to StatusUpdatedAtEQ.
func StatusUpdatedAt(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldStatusUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldStatus, v))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldProjectID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldContainsFold(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldCreatedBy, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldUpdatedAt))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v uint32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldUpdatedBy))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldContainsFold(FieldDescription, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldStartTime))
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldStartTime))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldDeadline, v))
}

// DeadlineIsNil applies the IsNil predicate on the "deadline" field.
func DeadlineIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldDeadline))
}

// DeadlineNotNil applies the NotNil predicate on the "deadline" field.
func DeadlineNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldDeadline))
}

// StatusUpdatedAtEQ applies the EQ predicate on the "status_updated_at" field.
func StatusUpdatedAtEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldStatusUpdatedAt, v))
}

// StatusUpdatedAtNEQ applies the NEQ predicate on the "status_updated_at" field.
func StatusUpdatedAtNEQ(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldStatusUpdatedAt, v))
}

// StatusUpdatedAtIn applies the In predicate on the "status_updated_at" field.
func StatusUpdatedAtIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldStatusUpdatedAt, vs...))
}

// StatusUpdatedAtNotIn applies the NotIn predicate on the "status_updated_at" field.
func StatusUpdatedAtNotIn(vs ...time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldStatusUpdatedAt, vs...))
}

// StatusUpdatedAtGT applies the GT predicate on the "status_updated_at" field.
func StatusUpdatedAtGT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldStatusUpdatedAt, v))
}

// StatusUpdatedAtGTE applies the GTE predicate on the "status_updated_at" field.
func StatusUpdatedAtGTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldStatusUpdatedAt, v))
}

// StatusUpdatedAtLT applies the LT predicate on the "status_updated_at" field.
func StatusUpdatedAtLT(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldStatusUpdatedAt, v))
}

// StatusUpdatedAtLTE applies the LTE predicate on the "status_updated_at" field.
func StatusUpdatedAtLTE(v time.Time) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldStatusUpdatedAt, v))
}

// StatusUpdatedAtIsNil applies the IsNil predicate on the "status_updated_at" field.
func StatusUpdatedAtIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldStatusUpdatedAt))
}

// StatusUpdatedAtNotNil applies the NotNil predicate on the "status_updated_at" field.
func StatusUpdatedAtNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldStatusUpdatedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldStatus, v))
}

// TasksIsNil applies the IsNil predicate on the "tasks" field.
func TasksIsNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIsNull(FieldTasks))
}

// TasksNotNil applies the NotNil predicate on the "tasks" field.
func TasksNotNil() predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotNull(FieldTasks))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldNotIn(FieldProjectID, vs...))
}

// ProjectIDGT applies the GT predicate on the "project_id" field.
func ProjectIDGT(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGT(FieldProjectID, v))
}

// ProjectIDGTE applies the GTE predicate on the "project_id" field.
func ProjectIDGTE(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldGTE(FieldProjectID, v))
}

// ProjectIDLT applies the LT predicate on the "project_id" field.
func ProjectIDLT(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLT(FieldProjectID, v))
}

// ProjectIDLTE applies the LTE predicate on the "project_id" field.
func ProjectIDLTE(v int32) predicate.TestPlan {
	return predicate.TestPlan(sql.FieldLTE(FieldProjectID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TestPlan) predicate.TestPlan {
	return predicate.TestPlan(func(s *sql.Selector) {
		p(s.Not())
	})
}
