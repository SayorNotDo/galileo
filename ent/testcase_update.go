// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"galileo/ent/predicate"
	"galileo/ent/testcase"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestCaseUpdate is the builder for updating TestCase entities.
type TestCaseUpdate struct {
	config
	hooks    []Hook
	mutation *TestCaseMutation
}

// Where appends a list predicates to the TestCaseUpdate builder.
func (tcu *TestCaseUpdate) Where(ps ...predicate.TestCase) *TestCaseUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetName sets the "name" field.
func (tcu *TestCaseUpdate) SetName(s string) *TestCaseUpdate {
	tcu.mutation.SetName(s)
	return tcu
}

// SetUpdateBy sets the "update_by" field.
func (tcu *TestCaseUpdate) SetUpdateBy(u uint32) *TestCaseUpdate {
	tcu.mutation.ResetUpdateBy()
	tcu.mutation.SetUpdateBy(u)
	return tcu
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableUpdateBy(u *uint32) *TestCaseUpdate {
	if u != nil {
		tcu.SetUpdateBy(*u)
	}
	return tcu
}

// AddUpdateBy adds u to the "update_by" field.
func (tcu *TestCaseUpdate) AddUpdateBy(u int32) *TestCaseUpdate {
	tcu.mutation.AddUpdateBy(u)
	return tcu
}

// ClearUpdateBy clears the value of the "update_by" field.
func (tcu *TestCaseUpdate) ClearUpdateBy() *TestCaseUpdate {
	tcu.mutation.ClearUpdateBy()
	return tcu
}

// SetUpdateAt sets the "update_at" field.
func (tcu *TestCaseUpdate) SetUpdateAt(t time.Time) *TestCaseUpdate {
	tcu.mutation.SetUpdateAt(t)
	return tcu
}

// ClearUpdateAt clears the value of the "update_at" field.
func (tcu *TestCaseUpdate) ClearUpdateAt() *TestCaseUpdate {
	tcu.mutation.ClearUpdateAt()
	return tcu
}

// SetStatus sets the "status" field.
func (tcu *TestCaseUpdate) SetStatus(i int8) *TestCaseUpdate {
	tcu.mutation.ResetStatus()
	tcu.mutation.SetStatus(i)
	return tcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableStatus(i *int8) *TestCaseUpdate {
	if i != nil {
		tcu.SetStatus(*i)
	}
	return tcu
}

// AddStatus adds i to the "status" field.
func (tcu *TestCaseUpdate) AddStatus(i int8) *TestCaseUpdate {
	tcu.mutation.AddStatus(i)
	return tcu
}

// SetType sets the "type" field.
func (tcu *TestCaseUpdate) SetType(i int16) *TestCaseUpdate {
	tcu.mutation.ResetType()
	tcu.mutation.SetType(i)
	return tcu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableType(i *int16) *TestCaseUpdate {
	if i != nil {
		tcu.SetType(*i)
	}
	return tcu
}

// AddType adds i to the "type" field.
func (tcu *TestCaseUpdate) AddType(i int16) *TestCaseUpdate {
	tcu.mutation.AddType(i)
	return tcu
}

// SetPriority sets the "priority" field.
func (tcu *TestCaseUpdate) SetPriority(i int8) *TestCaseUpdate {
	tcu.mutation.ResetPriority()
	tcu.mutation.SetPriority(i)
	return tcu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillablePriority(i *int8) *TestCaseUpdate {
	if i != nil {
		tcu.SetPriority(*i)
	}
	return tcu
}

// AddPriority adds i to the "priority" field.
func (tcu *TestCaseUpdate) AddPriority(i int8) *TestCaseUpdate {
	tcu.mutation.AddPriority(i)
	return tcu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcu *TestCaseUpdate) SetDeletedAt(t time.Time) *TestCaseUpdate {
	tcu.mutation.SetDeletedAt(t)
	return tcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableDeletedAt(t *time.Time) *TestCaseUpdate {
	if t != nil {
		tcu.SetDeletedAt(*t)
	}
	return tcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcu *TestCaseUpdate) ClearDeletedAt() *TestCaseUpdate {
	tcu.mutation.ClearDeletedAt()
	return tcu
}

// SetDeletedBy sets the "deleted_by" field.
func (tcu *TestCaseUpdate) SetDeletedBy(u uint32) *TestCaseUpdate {
	tcu.mutation.ResetDeletedBy()
	tcu.mutation.SetDeletedBy(u)
	return tcu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableDeletedBy(u *uint32) *TestCaseUpdate {
	if u != nil {
		tcu.SetDeletedBy(*u)
	}
	return tcu
}

// AddDeletedBy adds u to the "deleted_by" field.
func (tcu *TestCaseUpdate) AddDeletedBy(u int32) *TestCaseUpdate {
	tcu.mutation.AddDeletedBy(u)
	return tcu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcu *TestCaseUpdate) ClearDeletedBy() *TestCaseUpdate {
	tcu.mutation.ClearDeletedBy()
	return tcu
}

// SetDescription sets the "description" field.
func (tcu *TestCaseUpdate) SetDescription(s string) *TestCaseUpdate {
	tcu.mutation.SetDescription(s)
	return tcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableDescription(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetDescription(*s)
	}
	return tcu
}

// ClearDescription clears the value of the "description" field.
func (tcu *TestCaseUpdate) ClearDescription() *TestCaseUpdate {
	tcu.mutation.ClearDescription()
	return tcu
}

// SetURL sets the "url" field.
func (tcu *TestCaseUpdate) SetURL(s string) *TestCaseUpdate {
	tcu.mutation.SetURL(s)
	return tcu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tcu *TestCaseUpdate) SetNillableURL(s *string) *TestCaseUpdate {
	if s != nil {
		tcu.SetURL(*s)
	}
	return tcu
}

// ClearURL clears the value of the "url" field.
func (tcu *TestCaseUpdate) ClearURL() *TestCaseUpdate {
	tcu.mutation.ClearURL()
	return tcu
}

// Mutation returns the TestCaseMutation object of the builder.
func (tcu *TestCaseUpdate) Mutation() *TestCaseMutation {
	return tcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TestCaseUpdate) Save(ctx context.Context) (int, error) {
	tcu.defaults()
	return withHooks[int, TestCaseMutation](ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TestCaseUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TestCaseUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TestCaseUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *TestCaseUpdate) defaults() {
	if _, ok := tcu.mutation.UpdateAt(); !ok && !tcu.mutation.UpdateAtCleared() {
		v := testcase.UpdateDefaultUpdateAt()
		tcu.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TestCaseUpdate) check() error {
	if v, ok := tcu.mutation.Name(); ok {
		if err := testcase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TestCase.name": %w`, err)}
		}
	}
	return nil
}

func (tcu *TestCaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase.Table, testcase.Columns, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Name(); ok {
		_spec.SetField(testcase.FieldName, field.TypeString, value)
	}
	if value, ok := tcu.mutation.UpdateBy(); ok {
		_spec.SetField(testcase.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := tcu.mutation.AddedUpdateBy(); ok {
		_spec.AddField(testcase.FieldUpdateBy, field.TypeUint32, value)
	}
	if tcu.mutation.UpdateByCleared() {
		_spec.ClearField(testcase.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := tcu.mutation.UpdateAt(); ok {
		_spec.SetField(testcase.FieldUpdateAt, field.TypeTime, value)
	}
	if tcu.mutation.UpdateAtCleared() {
		_spec.ClearField(testcase.FieldUpdateAt, field.TypeTime)
	}
	if value, ok := tcu.mutation.Status(); ok {
		_spec.SetField(testcase.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tcu.mutation.AddedStatus(); ok {
		_spec.AddField(testcase.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tcu.mutation.GetType(); ok {
		_spec.SetField(testcase.FieldType, field.TypeInt16, value)
	}
	if value, ok := tcu.mutation.AddedType(); ok {
		_spec.AddField(testcase.FieldType, field.TypeInt16, value)
	}
	if value, ok := tcu.mutation.Priority(); ok {
		_spec.SetField(testcase.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := tcu.mutation.AddedPriority(); ok {
		_spec.AddField(testcase.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := tcu.mutation.DeletedAt(); ok {
		_spec.SetField(testcase.FieldDeletedAt, field.TypeTime, value)
	}
	if tcu.mutation.DeletedAtCleared() {
		_spec.ClearField(testcase.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcu.mutation.DeletedBy(); ok {
		_spec.SetField(testcase.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := tcu.mutation.AddedDeletedBy(); ok {
		_spec.AddField(testcase.FieldDeletedBy, field.TypeUint32, value)
	}
	if tcu.mutation.DeletedByCleared() {
		_spec.ClearField(testcase.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := tcu.mutation.Description(); ok {
		_spec.SetField(testcase.FieldDescription, field.TypeString, value)
	}
	if tcu.mutation.DescriptionCleared() {
		_spec.ClearField(testcase.FieldDescription, field.TypeString)
	}
	if value, ok := tcu.mutation.URL(); ok {
		_spec.SetField(testcase.FieldURL, field.TypeString, value)
	}
	if tcu.mutation.URLCleared() {
		_spec.ClearField(testcase.FieldURL, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TestCaseUpdateOne is the builder for updating a single TestCase entity.
type TestCaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestCaseMutation
}

// SetName sets the "name" field.
func (tcuo *TestCaseUpdateOne) SetName(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetName(s)
	return tcuo
}

// SetUpdateBy sets the "update_by" field.
func (tcuo *TestCaseUpdateOne) SetUpdateBy(u uint32) *TestCaseUpdateOne {
	tcuo.mutation.ResetUpdateBy()
	tcuo.mutation.SetUpdateBy(u)
	return tcuo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableUpdateBy(u *uint32) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetUpdateBy(*u)
	}
	return tcuo
}

// AddUpdateBy adds u to the "update_by" field.
func (tcuo *TestCaseUpdateOne) AddUpdateBy(u int32) *TestCaseUpdateOne {
	tcuo.mutation.AddUpdateBy(u)
	return tcuo
}

// ClearUpdateBy clears the value of the "update_by" field.
func (tcuo *TestCaseUpdateOne) ClearUpdateBy() *TestCaseUpdateOne {
	tcuo.mutation.ClearUpdateBy()
	return tcuo
}

// SetUpdateAt sets the "update_at" field.
func (tcuo *TestCaseUpdateOne) SetUpdateAt(t time.Time) *TestCaseUpdateOne {
	tcuo.mutation.SetUpdateAt(t)
	return tcuo
}

// ClearUpdateAt clears the value of the "update_at" field.
func (tcuo *TestCaseUpdateOne) ClearUpdateAt() *TestCaseUpdateOne {
	tcuo.mutation.ClearUpdateAt()
	return tcuo
}

// SetStatus sets the "status" field.
func (tcuo *TestCaseUpdateOne) SetStatus(i int8) *TestCaseUpdateOne {
	tcuo.mutation.ResetStatus()
	tcuo.mutation.SetStatus(i)
	return tcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableStatus(i *int8) *TestCaseUpdateOne {
	if i != nil {
		tcuo.SetStatus(*i)
	}
	return tcuo
}

// AddStatus adds i to the "status" field.
func (tcuo *TestCaseUpdateOne) AddStatus(i int8) *TestCaseUpdateOne {
	tcuo.mutation.AddStatus(i)
	return tcuo
}

// SetType sets the "type" field.
func (tcuo *TestCaseUpdateOne) SetType(i int16) *TestCaseUpdateOne {
	tcuo.mutation.ResetType()
	tcuo.mutation.SetType(i)
	return tcuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableType(i *int16) *TestCaseUpdateOne {
	if i != nil {
		tcuo.SetType(*i)
	}
	return tcuo
}

// AddType adds i to the "type" field.
func (tcuo *TestCaseUpdateOne) AddType(i int16) *TestCaseUpdateOne {
	tcuo.mutation.AddType(i)
	return tcuo
}

// SetPriority sets the "priority" field.
func (tcuo *TestCaseUpdateOne) SetPriority(i int8) *TestCaseUpdateOne {
	tcuo.mutation.ResetPriority()
	tcuo.mutation.SetPriority(i)
	return tcuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillablePriority(i *int8) *TestCaseUpdateOne {
	if i != nil {
		tcuo.SetPriority(*i)
	}
	return tcuo
}

// AddPriority adds i to the "priority" field.
func (tcuo *TestCaseUpdateOne) AddPriority(i int8) *TestCaseUpdateOne {
	tcuo.mutation.AddPriority(i)
	return tcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcuo *TestCaseUpdateOne) SetDeletedAt(t time.Time) *TestCaseUpdateOne {
	tcuo.mutation.SetDeletedAt(t)
	return tcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableDeletedAt(t *time.Time) *TestCaseUpdateOne {
	if t != nil {
		tcuo.SetDeletedAt(*t)
	}
	return tcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcuo *TestCaseUpdateOne) ClearDeletedAt() *TestCaseUpdateOne {
	tcuo.mutation.ClearDeletedAt()
	return tcuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tcuo *TestCaseUpdateOne) SetDeletedBy(u uint32) *TestCaseUpdateOne {
	tcuo.mutation.ResetDeletedBy()
	tcuo.mutation.SetDeletedBy(u)
	return tcuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableDeletedBy(u *uint32) *TestCaseUpdateOne {
	if u != nil {
		tcuo.SetDeletedBy(*u)
	}
	return tcuo
}

// AddDeletedBy adds u to the "deleted_by" field.
func (tcuo *TestCaseUpdateOne) AddDeletedBy(u int32) *TestCaseUpdateOne {
	tcuo.mutation.AddDeletedBy(u)
	return tcuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcuo *TestCaseUpdateOne) ClearDeletedBy() *TestCaseUpdateOne {
	tcuo.mutation.ClearDeletedBy()
	return tcuo
}

// SetDescription sets the "description" field.
func (tcuo *TestCaseUpdateOne) SetDescription(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetDescription(s)
	return tcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableDescription(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetDescription(*s)
	}
	return tcuo
}

// ClearDescription clears the value of the "description" field.
func (tcuo *TestCaseUpdateOne) ClearDescription() *TestCaseUpdateOne {
	tcuo.mutation.ClearDescription()
	return tcuo
}

// SetURL sets the "url" field.
func (tcuo *TestCaseUpdateOne) SetURL(s string) *TestCaseUpdateOne {
	tcuo.mutation.SetURL(s)
	return tcuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tcuo *TestCaseUpdateOne) SetNillableURL(s *string) *TestCaseUpdateOne {
	if s != nil {
		tcuo.SetURL(*s)
	}
	return tcuo
}

// ClearURL clears the value of the "url" field.
func (tcuo *TestCaseUpdateOne) ClearURL() *TestCaseUpdateOne {
	tcuo.mutation.ClearURL()
	return tcuo
}

// Mutation returns the TestCaseMutation object of the builder.
func (tcuo *TestCaseUpdateOne) Mutation() *TestCaseMutation {
	return tcuo.mutation
}

// Where appends a list predicates to the TestCaseUpdate builder.
func (tcuo *TestCaseUpdateOne) Where(ps ...predicate.TestCase) *TestCaseUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TestCaseUpdateOne) Select(field string, fields ...string) *TestCaseUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TestCase entity.
func (tcuo *TestCaseUpdateOne) Save(ctx context.Context) (*TestCase, error) {
	tcuo.defaults()
	return withHooks[*TestCase, TestCaseMutation](ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TestCaseUpdateOne) SaveX(ctx context.Context) *TestCase {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TestCaseUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TestCaseUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *TestCaseUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdateAt(); !ok && !tcuo.mutation.UpdateAtCleared() {
		v := testcase.UpdateDefaultUpdateAt()
		tcuo.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TestCaseUpdateOne) check() error {
	if v, ok := tcuo.mutation.Name(); ok {
		if err := testcase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TestCase.name": %w`, err)}
		}
	}
	return nil
}

func (tcuo *TestCaseUpdateOne) sqlSave(ctx context.Context) (_node *TestCase, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(testcase.Table, testcase.Columns, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestCase.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcase.FieldID)
		for _, f := range fields {
			if !testcase.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testcase.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Name(); ok {
		_spec.SetField(testcase.FieldName, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.UpdateBy(); ok {
		_spec.SetField(testcase.FieldUpdateBy, field.TypeUint32, value)
	}
	if value, ok := tcuo.mutation.AddedUpdateBy(); ok {
		_spec.AddField(testcase.FieldUpdateBy, field.TypeUint32, value)
	}
	if tcuo.mutation.UpdateByCleared() {
		_spec.ClearField(testcase.FieldUpdateBy, field.TypeUint32)
	}
	if value, ok := tcuo.mutation.UpdateAt(); ok {
		_spec.SetField(testcase.FieldUpdateAt, field.TypeTime, value)
	}
	if tcuo.mutation.UpdateAtCleared() {
		_spec.ClearField(testcase.FieldUpdateAt, field.TypeTime)
	}
	if value, ok := tcuo.mutation.Status(); ok {
		_spec.SetField(testcase.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tcuo.mutation.AddedStatus(); ok {
		_spec.AddField(testcase.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := tcuo.mutation.GetType(); ok {
		_spec.SetField(testcase.FieldType, field.TypeInt16, value)
	}
	if value, ok := tcuo.mutation.AddedType(); ok {
		_spec.AddField(testcase.FieldType, field.TypeInt16, value)
	}
	if value, ok := tcuo.mutation.Priority(); ok {
		_spec.SetField(testcase.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := tcuo.mutation.AddedPriority(); ok {
		_spec.AddField(testcase.FieldPriority, field.TypeInt8, value)
	}
	if value, ok := tcuo.mutation.DeletedAt(); ok {
		_spec.SetField(testcase.FieldDeletedAt, field.TypeTime, value)
	}
	if tcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(testcase.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcuo.mutation.DeletedBy(); ok {
		_spec.SetField(testcase.FieldDeletedBy, field.TypeUint32, value)
	}
	if value, ok := tcuo.mutation.AddedDeletedBy(); ok {
		_spec.AddField(testcase.FieldDeletedBy, field.TypeUint32, value)
	}
	if tcuo.mutation.DeletedByCleared() {
		_spec.ClearField(testcase.FieldDeletedBy, field.TypeUint32)
	}
	if value, ok := tcuo.mutation.Description(); ok {
		_spec.SetField(testcase.FieldDescription, field.TypeString, value)
	}
	if tcuo.mutation.DescriptionCleared() {
		_spec.ClearField(testcase.FieldDescription, field.TypeString)
	}
	if value, ok := tcuo.mutation.URL(); ok {
		_spec.SetField(testcase.FieldURL, field.TypeString, value)
	}
	if tcuo.mutation.URLCleared() {
		_spec.ClearField(testcase.FieldURL, field.TypeString)
	}
	_node = &TestCase{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testcase.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
