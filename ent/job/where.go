// Code generated by ent, DO NOT EDIT.

package job

import (
	"galileo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedBy, v))
}

// Payload applies equality check predicate on the "payload" field. It's identical to PayloadEQ.
func Payload(v []byte) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPayload, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// Worker applies equality check predicate on the "worker" field. It's identical to WorkerEQ.
func Worker(v uint32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldWorker, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v uint32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDeletedBy, v))
}

// EntryID applies equality check predicate on the "entry_id" field. It's identical to EntryIDEQ.
func EntryID(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldEntryID, v))
}

// Config applies equality check predicate on the "config" field. It's identical to ConfigEQ.
func Config(v []byte) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldConfig, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v int64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTaskID, v))
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldActive, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint32) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint32) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint32) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint32) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint32) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint32) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint32) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedBy, v))
}

// PayloadEQ applies the EQ predicate on the "payload" field.
func PayloadEQ(v []byte) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldPayload, v))
}

// PayloadNEQ applies the NEQ predicate on the "payload" field.
func PayloadNEQ(v []byte) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldPayload, v))
}

// PayloadIn applies the In predicate on the "payload" field.
func PayloadIn(vs ...[]byte) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldPayload, vs...))
}

// PayloadNotIn applies the NotIn predicate on the "payload" field.
func PayloadNotIn(vs ...[]byte) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldPayload, vs...))
}

// PayloadGT applies the GT predicate on the "payload" field.
func PayloadGT(v []byte) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldPayload, v))
}

// PayloadGTE applies the GTE predicate on the "payload" field.
func PayloadGTE(v []byte) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldPayload, v))
}

// PayloadLT applies the LT predicate on the "payload" field.
func PayloadLT(v []byte) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldPayload, v))
}

// PayloadLTE applies the LTE predicate on the "payload" field.
func PayloadLTE(v []byte) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldPayload, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldPayload))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldType, v))
}

// TypeIsNil applies the IsNil predicate on the "type" field.
func TypeIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldType))
}

// TypeNotNil applies the NotNil predicate on the "type" field.
func TypeNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldType))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldType, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldUpdatedAt))
}

// WorkerEQ applies the EQ predicate on the "worker" field.
func WorkerEQ(v uint32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldWorker, v))
}

// WorkerNEQ applies the NEQ predicate on the "worker" field.
func WorkerNEQ(v uint32) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldWorker, v))
}

// WorkerIn applies the In predicate on the "worker" field.
func WorkerIn(vs ...uint32) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldWorker, vs...))
}

// WorkerNotIn applies the NotIn predicate on the "worker" field.
func WorkerNotIn(vs ...uint32) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldWorker, vs...))
}

// WorkerGT applies the GT predicate on the "worker" field.
func WorkerGT(v uint32) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldWorker, v))
}

// WorkerGTE applies the GTE predicate on the "worker" field.
func WorkerGTE(v uint32) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldWorker, v))
}

// WorkerLT applies the LT predicate on the "worker" field.
func WorkerLT(v uint32) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldWorker, v))
}

// WorkerLTE applies the LTE predicate on the "worker" field.
func WorkerLTE(v uint32) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldWorker, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v uint32) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v uint32) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...uint32) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...uint32) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v uint32) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v uint32) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v uint32) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v uint32) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldDeletedBy))
}

// EntryIDEQ applies the EQ predicate on the "entry_id" field.
func EntryIDEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldEntryID, v))
}

// EntryIDNEQ applies the NEQ predicate on the "entry_id" field.
func EntryIDNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldEntryID, v))
}

// EntryIDIn applies the In predicate on the "entry_id" field.
func EntryIDIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldEntryID, vs...))
}

// EntryIDNotIn applies the NotIn predicate on the "entry_id" field.
func EntryIDNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldEntryID, vs...))
}

// EntryIDGT applies the GT predicate on the "entry_id" field.
func EntryIDGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldEntryID, v))
}

// EntryIDGTE applies the GTE predicate on the "entry_id" field.
func EntryIDGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldEntryID, v))
}

// EntryIDLT applies the LT predicate on the "entry_id" field.
func EntryIDLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldEntryID, v))
}

// EntryIDLTE applies the LTE predicate on the "entry_id" field.
func EntryIDLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldEntryID, v))
}

// EntryIDContains applies the Contains predicate on the "entry_id" field.
func EntryIDContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldEntryID, v))
}

// EntryIDHasPrefix applies the HasPrefix predicate on the "entry_id" field.
func EntryIDHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldEntryID, v))
}

// EntryIDHasSuffix applies the HasSuffix predicate on the "entry_id" field.
func EntryIDHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldEntryID, v))
}

// EntryIDIsNil applies the IsNil predicate on the "entry_id" field.
func EntryIDIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldEntryID))
}

// EntryIDNotNil applies the NotNil predicate on the "entry_id" field.
func EntryIDNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldEntryID))
}

// EntryIDEqualFold applies the EqualFold predicate on the "entry_id" field.
func EntryIDEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldEntryID, v))
}

// EntryIDContainsFold applies the ContainsFold predicate on the "entry_id" field.
func EntryIDContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldEntryID, v))
}

// ConfigEQ applies the EQ predicate on the "config" field.
func ConfigEQ(v []byte) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldConfig, v))
}

// ConfigNEQ applies the NEQ predicate on the "config" field.
func ConfigNEQ(v []byte) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldConfig, v))
}

// ConfigIn applies the In predicate on the "config" field.
func ConfigIn(vs ...[]byte) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldConfig, vs...))
}

// ConfigNotIn applies the NotIn predicate on the "config" field.
func ConfigNotIn(vs ...[]byte) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldConfig, vs...))
}

// ConfigGT applies the GT predicate on the "config" field.
func ConfigGT(v []byte) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldConfig, v))
}

// ConfigGTE applies the GTE predicate on the "config" field.
func ConfigGTE(v []byte) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldConfig, v))
}

// ConfigLT applies the LT predicate on the "config" field.
func ConfigLT(v []byte) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldConfig, v))
}

// ConfigLTE applies the LTE predicate on the "config" field.
func ConfigLTE(v []byte) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldConfig, v))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldConfig))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v int64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v int64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...int64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...int64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v int64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v int64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v int64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v int64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldTaskID, v))
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldActive, v))
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldActive, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		p(s.Not())
	})
}
