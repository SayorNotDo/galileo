// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"galileo/ent/testcase"
	"galileo/ent/testcasesuite"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestCaseCreate is the builder for creating a TestCase entity.
type TestCaseCreate struct {
	config
	mutation *TestCaseMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tcc *TestCaseCreate) SetName(s string) *TestCaseCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetCreatedBy sets the "created_by" field.
func (tcc *TestCaseCreate) SetCreatedBy(u uint32) *TestCaseCreate {
	tcc.mutation.SetCreatedBy(u)
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TestCaseCreate) SetCreatedAt(t time.Time) *TestCaseCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableCreatedAt(t *time.Time) *TestCaseCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdateBy sets the "update_by" field.
func (tcc *TestCaseCreate) SetUpdateBy(u uint32) *TestCaseCreate {
	tcc.mutation.SetUpdateBy(u)
	return tcc
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableUpdateBy(u *uint32) *TestCaseCreate {
	if u != nil {
		tcc.SetUpdateBy(*u)
	}
	return tcc
}

// SetUpdateAt sets the "update_at" field.
func (tcc *TestCaseCreate) SetUpdateAt(t time.Time) *TestCaseCreate {
	tcc.mutation.SetUpdateAt(t)
	return tcc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableUpdateAt(t *time.Time) *TestCaseCreate {
	if t != nil {
		tcc.SetUpdateAt(*t)
	}
	return tcc
}

// SetStatus sets the "status" field.
func (tcc *TestCaseCreate) SetStatus(i int8) *TestCaseCreate {
	tcc.mutation.SetStatus(i)
	return tcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableStatus(i *int8) *TestCaseCreate {
	if i != nil {
		tcc.SetStatus(*i)
	}
	return tcc
}

// SetType sets the "type" field.
func (tcc *TestCaseCreate) SetType(i int8) *TestCaseCreate {
	tcc.mutation.SetType(i)
	return tcc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableType(i *int8) *TestCaseCreate {
	if i != nil {
		tcc.SetType(*i)
	}
	return tcc
}

// SetPriority sets the "priority" field.
func (tcc *TestCaseCreate) SetPriority(i int8) *TestCaseCreate {
	tcc.mutation.SetPriority(i)
	return tcc
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillablePriority(i *int8) *TestCaseCreate {
	if i != nil {
		tcc.SetPriority(*i)
	}
	return tcc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcc *TestCaseCreate) SetDeletedAt(t time.Time) *TestCaseCreate {
	tcc.mutation.SetDeletedAt(t)
	return tcc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableDeletedAt(t *time.Time) *TestCaseCreate {
	if t != nil {
		tcc.SetDeletedAt(*t)
	}
	return tcc
}

// SetDeletedBy sets the "deleted_by" field.
func (tcc *TestCaseCreate) SetDeletedBy(u uint32) *TestCaseCreate {
	tcc.mutation.SetDeletedBy(u)
	return tcc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableDeletedBy(u *uint32) *TestCaseCreate {
	if u != nil {
		tcc.SetDeletedBy(*u)
	}
	return tcc
}

// SetDescription sets the "description" field.
func (tcc *TestCaseCreate) SetDescription(s string) *TestCaseCreate {
	tcc.mutation.SetDescription(s)
	return tcc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableDescription(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetDescription(*s)
	}
	return tcc
}

// SetURL sets the "url" field.
func (tcc *TestCaseCreate) SetURL(s string) *TestCaseCreate {
	tcc.mutation.SetURL(s)
	return tcc
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tcc *TestCaseCreate) SetNillableURL(s *string) *TestCaseCreate {
	if s != nil {
		tcc.SetURL(*s)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TestCaseCreate) SetID(i int64) *TestCaseCreate {
	tcc.mutation.SetID(i)
	return tcc
}

// AddTestcaseSuiteIDs adds the "testcaseSuites" edge to the TestCaseSuite entity by IDs.
func (tcc *TestCaseCreate) AddTestcaseSuiteIDs(ids ...int64) *TestCaseCreate {
	tcc.mutation.AddTestcaseSuiteIDs(ids...)
	return tcc
}

// AddTestcaseSuites adds the "testcaseSuites" edges to the TestCaseSuite entity.
func (tcc *TestCaseCreate) AddTestcaseSuites(t ...*TestCaseSuite) *TestCaseCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddTestcaseSuiteIDs(ids...)
}

// Mutation returns the TestCaseMutation object of the builder.
func (tcc *TestCaseCreate) Mutation() *TestCaseMutation {
	return tcc.mutation
}

// Save creates the TestCase in the database.
func (tcc *TestCaseCreate) Save(ctx context.Context) (*TestCase, error) {
	tcc.defaults()
	return withHooks[*TestCase, TestCaseMutation](ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TestCaseCreate) SaveX(ctx context.Context) *TestCase {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TestCaseCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TestCaseCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TestCaseCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := testcase.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.Status(); !ok {
		v := testcase.DefaultStatus
		tcc.mutation.SetStatus(v)
	}
	if _, ok := tcc.mutation.GetType(); !ok {
		v := testcase.DefaultType
		tcc.mutation.SetType(v)
	}
	if _, ok := tcc.mutation.Priority(); !ok {
		v := testcase.DefaultPriority
		tcc.mutation.SetPriority(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TestCaseCreate) check() error {
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TestCase.name"`)}
	}
	if v, ok := tcc.mutation.Name(); ok {
		if err := testcase.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "TestCase.name": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "TestCase.created_by"`)}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestCase.created_at"`)}
	}
	if _, ok := tcc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TestCase.status"`)}
	}
	if _, ok := tcc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "TestCase.type"`)}
	}
	if _, ok := tcc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "TestCase.priority"`)}
	}
	return nil
}

func (tcc *TestCaseCreate) sqlSave(ctx context.Context) (*TestCase, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TestCaseCreate) createSpec() (*TestCase, *sqlgraph.CreateSpec) {
	var (
		_node = &TestCase{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(testcase.Table, sqlgraph.NewFieldSpec(testcase.FieldID, field.TypeInt64))
	)
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.SetField(testcase.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tcc.mutation.CreatedBy(); ok {
		_spec.SetField(testcase.FieldCreatedBy, field.TypeUint32, value)
		_node.CreatedBy = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(testcase.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdateBy(); ok {
		_spec.SetField(testcase.FieldUpdateBy, field.TypeUint32, value)
		_node.UpdateBy = value
	}
	if value, ok := tcc.mutation.UpdateAt(); ok {
		_spec.SetField(testcase.FieldUpdateAt, field.TypeTime, value)
		_node.UpdateAt = value
	}
	if value, ok := tcc.mutation.Status(); ok {
		_spec.SetField(testcase.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := tcc.mutation.GetType(); ok {
		_spec.SetField(testcase.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := tcc.mutation.Priority(); ok {
		_spec.SetField(testcase.FieldPriority, field.TypeInt8, value)
		_node.Priority = value
	}
	if value, ok := tcc.mutation.DeletedAt(); ok {
		_spec.SetField(testcase.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tcc.mutation.DeletedBy(); ok {
		_spec.SetField(testcase.FieldDeletedBy, field.TypeUint32, value)
		_node.DeletedBy = value
	}
	if value, ok := tcc.mutation.Description(); ok {
		_spec.SetField(testcase.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tcc.mutation.URL(); ok {
		_spec.SetField(testcase.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := tcc.mutation.TestcaseSuitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   testcase.TestcaseSuitesTable,
			Columns: testcase.TestcaseSuitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testcasesuite.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TestCaseCreateBulk is the builder for creating many TestCase entities in bulk.
type TestCaseCreateBulk struct {
	config
	builders []*TestCaseCreate
}

// Save creates the TestCase entities in the database.
func (tccb *TestCaseCreateBulk) Save(ctx context.Context) ([]*TestCase, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TestCase, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestCaseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TestCaseCreateBulk) SaveX(ctx context.Context) []*TestCase {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TestCaseCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TestCaseCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
