// Code generated by ent, DO NOT EDIT.

package metaevent

import (
	"galileo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldID, id))
}

// EventName applies equality check predicate on the "event_name" field. It's identical to EventNameEQ.
func EventName(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldEventName, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldUUID, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldDisplayName, v))
}

// EventDesc applies equality check predicate on the "event_desc" field. It's identical to EventDescEQ.
func EventDesc(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldEventDesc, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldRemark, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// EventNameEQ applies the EQ predicate on the "event_name" field.
func EventNameEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldEventName, v))
}

// EventNameNEQ applies the NEQ predicate on the "event_name" field.
func EventNameNEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldEventName, v))
}

// EventNameIn applies the In predicate on the "event_name" field.
func EventNameIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldEventName, vs...))
}

// EventNameNotIn applies the NotIn predicate on the "event_name" field.
func EventNameNotIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldEventName, vs...))
}

// EventNameGT applies the GT predicate on the "event_name" field.
func EventNameGT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldEventName, v))
}

// EventNameGTE applies the GTE predicate on the "event_name" field.
func EventNameGTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldEventName, v))
}

// EventNameLT applies the LT predicate on the "event_name" field.
func EventNameLT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldEventName, v))
}

// EventNameLTE applies the LTE predicate on the "event_name" field.
func EventNameLTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldEventName, v))
}

// EventNameContains applies the Contains predicate on the "event_name" field.
func EventNameContains(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContains(FieldEventName, v))
}

// EventNameHasPrefix applies the HasPrefix predicate on the "event_name" field.
func EventNameHasPrefix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasPrefix(FieldEventName, v))
}

// EventNameHasSuffix applies the HasSuffix predicate on the "event_name" field.
func EventNameHasSuffix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasSuffix(FieldEventName, v))
}

// EventNameEqualFold applies the EqualFold predicate on the "event_name" field.
func EventNameEqualFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEqualFold(FieldEventName, v))
}

// EventNameContainsFold applies the ContainsFold predicate on the "event_name" field.
func EventNameContainsFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContainsFold(FieldEventName, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldUUID, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContainsFold(FieldDisplayName, v))
}

// EventDescEQ applies the EQ predicate on the "event_desc" field.
func EventDescEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldEventDesc, v))
}

// EventDescNEQ applies the NEQ predicate on the "event_desc" field.
func EventDescNEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldEventDesc, v))
}

// EventDescIn applies the In predicate on the "event_desc" field.
func EventDescIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldEventDesc, vs...))
}

// EventDescNotIn applies the NotIn predicate on the "event_desc" field.
func EventDescNotIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldEventDesc, vs...))
}

// EventDescGT applies the GT predicate on the "event_desc" field.
func EventDescGT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldEventDesc, v))
}

// EventDescGTE applies the GTE predicate on the "event_desc" field.
func EventDescGTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldEventDesc, v))
}

// EventDescLT applies the LT predicate on the "event_desc" field.
func EventDescLT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldEventDesc, v))
}

// EventDescLTE applies the LTE predicate on the "event_desc" field.
func EventDescLTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldEventDesc, v))
}

// EventDescContains applies the Contains predicate on the "event_desc" field.
func EventDescContains(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContains(FieldEventDesc, v))
}

// EventDescHasPrefix applies the HasPrefix predicate on the "event_desc" field.
func EventDescHasPrefix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasPrefix(FieldEventDesc, v))
}

// EventDescHasSuffix applies the HasSuffix predicate on the "event_desc" field.
func EventDescHasSuffix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasSuffix(FieldEventDesc, v))
}

// EventDescIsNil applies the IsNil predicate on the "event_desc" field.
func EventDescIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldEventDesc))
}

// EventDescNotNil applies the NotNil predicate on the "event_desc" field.
func EventDescNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldEventDesc))
}

// EventDescEqualFold applies the EqualFold predicate on the "event_desc" field.
func EventDescEqualFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEqualFold(FieldEventDesc, v))
}

// EventDescContainsFold applies the ContainsFold predicate on the "event_desc" field.
func EventDescContainsFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContainsFold(FieldEventDesc, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldContainsFold(FieldRemark, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MetaEvent {
	return predicate.MetaEvent(sql.FieldNotNull(FieldUpdatedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MetaEvent) predicate.MetaEvent {
	return predicate.MetaEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MetaEvent) predicate.MetaEvent {
	return predicate.MetaEvent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MetaEvent) predicate.MetaEvent {
	return predicate.MetaEvent(func(s *sql.Selector) {
		p(s.Not())
	})
}
