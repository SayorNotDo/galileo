// Code generated by ent, DO NOT EDIT.

package api

import (
	"galileo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldName, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldURL, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldStatus, v))
}

// Headers applies equality check predicate on the "headers" field. It's identical to HeadersEQ.
func Headers(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldHeaders, v))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldBody, v))
}

// QueryParams applies equality check predicate on the "query_params" field. It's identical to QueryParamsEQ.
func QueryParams(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldQueryParams, v))
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldResponse, v))
}

// Module applies equality check predicate on the "module" field. It's identical to ModuleEQ.
func Module(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldModule, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint32) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldCreatedBy, v))
}

// IncludeFiles applies equality check predicate on the "include_files" field. It's identical to IncludeFilesEQ.
func IncludeFiles(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldIncludeFiles, v))
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateBy applies equality check predicate on the "update_by" field. It's identical to UpdateByEQ.
func UpdateBy(v uint32) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldUpdateBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v uint32) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldDeletedBy, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldName, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldURL, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldStatus, v))
}

// HeadersEQ applies the EQ predicate on the "headers" field.
func HeadersEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldHeaders, v))
}

// HeadersNEQ applies the NEQ predicate on the "headers" field.
func HeadersNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldHeaders, v))
}

// HeadersIn applies the In predicate on the "headers" field.
func HeadersIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldHeaders, vs...))
}

// HeadersNotIn applies the NotIn predicate on the "headers" field.
func HeadersNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldHeaders, vs...))
}

// HeadersGT applies the GT predicate on the "headers" field.
func HeadersGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldHeaders, v))
}

// HeadersGTE applies the GTE predicate on the "headers" field.
func HeadersGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldHeaders, v))
}

// HeadersLT applies the LT predicate on the "headers" field.
func HeadersLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldHeaders, v))
}

// HeadersLTE applies the LTE predicate on the "headers" field.
func HeadersLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldHeaders, v))
}

// HeadersContains applies the Contains predicate on the "headers" field.
func HeadersContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldHeaders, v))
}

// HeadersHasPrefix applies the HasPrefix predicate on the "headers" field.
func HeadersHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldHeaders, v))
}

// HeadersHasSuffix applies the HasSuffix predicate on the "headers" field.
func HeadersHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldHeaders, v))
}

// HeadersIsNil applies the IsNil predicate on the "headers" field.
func HeadersIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldHeaders))
}

// HeadersNotNil applies the NotNil predicate on the "headers" field.
func HeadersNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldHeaders))
}

// HeadersEqualFold applies the EqualFold predicate on the "headers" field.
func HeadersEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldHeaders, v))
}

// HeadersContainsFold applies the ContainsFold predicate on the "headers" field.
func HeadersContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldHeaders, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldBody, v))
}

// BodyIsNil applies the IsNil predicate on the "body" field.
func BodyIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldBody))
}

// BodyNotNil applies the NotNil predicate on the "body" field.
func BodyNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldBody))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldBody, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelIsNil applies the IsNil predicate on the "label" field.
func LabelIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldLabel))
}

// LabelNotNil applies the NotNil predicate on the "label" field.
func LabelNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldLabel))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldLabel, v))
}

// QueryParamsEQ applies the EQ predicate on the "query_params" field.
func QueryParamsEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldQueryParams, v))
}

// QueryParamsNEQ applies the NEQ predicate on the "query_params" field.
func QueryParamsNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldQueryParams, v))
}

// QueryParamsIn applies the In predicate on the "query_params" field.
func QueryParamsIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldQueryParams, vs...))
}

// QueryParamsNotIn applies the NotIn predicate on the "query_params" field.
func QueryParamsNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldQueryParams, vs...))
}

// QueryParamsGT applies the GT predicate on the "query_params" field.
func QueryParamsGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldQueryParams, v))
}

// QueryParamsGTE applies the GTE predicate on the "query_params" field.
func QueryParamsGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldQueryParams, v))
}

// QueryParamsLT applies the LT predicate on the "query_params" field.
func QueryParamsLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldQueryParams, v))
}

// QueryParamsLTE applies the LTE predicate on the "query_params" field.
func QueryParamsLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldQueryParams, v))
}

// QueryParamsContains applies the Contains predicate on the "query_params" field.
func QueryParamsContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldQueryParams, v))
}

// QueryParamsHasPrefix applies the HasPrefix predicate on the "query_params" field.
func QueryParamsHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldQueryParams, v))
}

// QueryParamsHasSuffix applies the HasSuffix predicate on the "query_params" field.
func QueryParamsHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldQueryParams, v))
}

// QueryParamsIsNil applies the IsNil predicate on the "query_params" field.
func QueryParamsIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldQueryParams))
}

// QueryParamsNotNil applies the NotNil predicate on the "query_params" field.
func QueryParamsNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldQueryParams))
}

// QueryParamsEqualFold applies the EqualFold predicate on the "query_params" field.
func QueryParamsEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldQueryParams, v))
}

// QueryParamsContainsFold applies the ContainsFold predicate on the "query_params" field.
func QueryParamsContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldQueryParams, v))
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldResponse, v))
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldResponse, v))
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldResponse, vs...))
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldResponse, vs...))
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldResponse, v))
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldResponse, v))
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldResponse, v))
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldResponse, v))
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldResponse, v))
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldResponse, v))
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldResponse, v))
}

// ResponseIsNil applies the IsNil predicate on the "response" field.
func ResponseIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldResponse))
}

// ResponseNotNil applies the NotNil predicate on the "response" field.
func ResponseNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldResponse))
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldResponse, v))
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldResponse, v))
}

// ModuleEQ applies the EQ predicate on the "module" field.
func ModuleEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldModule, v))
}

// ModuleNEQ applies the NEQ predicate on the "module" field.
func ModuleNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldModule, v))
}

// ModuleIn applies the In predicate on the "module" field.
func ModuleIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldModule, vs...))
}

// ModuleNotIn applies the NotIn predicate on the "module" field.
func ModuleNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldModule, vs...))
}

// ModuleGT applies the GT predicate on the "module" field.
func ModuleGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldModule, v))
}

// ModuleGTE applies the GTE predicate on the "module" field.
func ModuleGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldModule, v))
}

// ModuleLT applies the LT predicate on the "module" field.
func ModuleLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldModule, v))
}

// ModuleLTE applies the LTE predicate on the "module" field.
func ModuleLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldModule, v))
}

// ModuleContains applies the Contains predicate on the "module" field.
func ModuleContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldModule, v))
}

// ModuleHasPrefix applies the HasPrefix predicate on the "module" field.
func ModuleHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldModule, v))
}

// ModuleHasSuffix applies the HasSuffix predicate on the "module" field.
func ModuleHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldModule, v))
}

// ModuleIsNil applies the IsNil predicate on the "module" field.
func ModuleIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldModule))
}

// ModuleNotNil applies the NotNil predicate on the "module" field.
func ModuleNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldModule))
}

// ModuleEqualFold applies the EqualFold predicate on the "module" field.
func ModuleEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldModule, v))
}

// ModuleContainsFold applies the ContainsFold predicate on the "module" field.
func ModuleContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldModule, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldDescription, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint32) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint32) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint32) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint32) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint32) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint32) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint32) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint32) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldCreatedBy, v))
}

// IncludeFilesEQ applies the EQ predicate on the "include_files" field.
func IncludeFilesEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldIncludeFiles, v))
}

// IncludeFilesNEQ applies the NEQ predicate on the "include_files" field.
func IncludeFilesNEQ(v string) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldIncludeFiles, v))
}

// IncludeFilesIn applies the In predicate on the "include_files" field.
func IncludeFilesIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldIncludeFiles, vs...))
}

// IncludeFilesNotIn applies the NotIn predicate on the "include_files" field.
func IncludeFilesNotIn(vs ...string) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldIncludeFiles, vs...))
}

// IncludeFilesGT applies the GT predicate on the "include_files" field.
func IncludeFilesGT(v string) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldIncludeFiles, v))
}

// IncludeFilesGTE applies the GTE predicate on the "include_files" field.
func IncludeFilesGTE(v string) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldIncludeFiles, v))
}

// IncludeFilesLT applies the LT predicate on the "include_files" field.
func IncludeFilesLT(v string) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldIncludeFiles, v))
}

// IncludeFilesLTE applies the LTE predicate on the "include_files" field.
func IncludeFilesLTE(v string) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldIncludeFiles, v))
}

// IncludeFilesContains applies the Contains predicate on the "include_files" field.
func IncludeFilesContains(v string) predicate.Api {
	return predicate.Api(sql.FieldContains(FieldIncludeFiles, v))
}

// IncludeFilesHasPrefix applies the HasPrefix predicate on the "include_files" field.
func IncludeFilesHasPrefix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasPrefix(FieldIncludeFiles, v))
}

// IncludeFilesHasSuffix applies the HasSuffix predicate on the "include_files" field.
func IncludeFilesHasSuffix(v string) predicate.Api {
	return predicate.Api(sql.FieldHasSuffix(FieldIncludeFiles, v))
}

// IncludeFilesIsNil applies the IsNil predicate on the "include_files" field.
func IncludeFilesIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldIncludeFiles))
}

// IncludeFilesNotNil applies the NotNil predicate on the "include_files" field.
func IncludeFilesNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldIncludeFiles))
}

// IncludeFilesEqualFold applies the EqualFold predicate on the "include_files" field.
func IncludeFilesEqualFold(v string) predicate.Api {
	return predicate.Api(sql.FieldEqualFold(FieldIncludeFiles, v))
}

// IncludeFilesContainsFold applies the ContainsFold predicate on the "include_files" field.
func IncludeFilesContainsFold(v string) predicate.Api {
	return predicate.Api(sql.FieldContainsFold(FieldIncludeFiles, v))
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldUpdateAt, v))
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldUpdateAt, v))
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...time.Time) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldUpdateAt, vs...))
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...time.Time) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldUpdateAt, vs...))
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldUpdateAt, v))
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldUpdateAt, v))
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldUpdateAt, v))
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldUpdateAt, v))
}

// UpdateAtIsNil applies the IsNil predicate on the "update_at" field.
func UpdateAtIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldUpdateAt))
}

// UpdateAtNotNil applies the NotNil predicate on the "update_at" field.
func UpdateAtNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldUpdateAt))
}

// UpdateByEQ applies the EQ predicate on the "update_by" field.
func UpdateByEQ(v uint32) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldUpdateBy, v))
}

// UpdateByNEQ applies the NEQ predicate on the "update_by" field.
func UpdateByNEQ(v uint32) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldUpdateBy, v))
}

// UpdateByIn applies the In predicate on the "update_by" field.
func UpdateByIn(vs ...uint32) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldUpdateBy, vs...))
}

// UpdateByNotIn applies the NotIn predicate on the "update_by" field.
func UpdateByNotIn(vs ...uint32) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldUpdateBy, vs...))
}

// UpdateByGT applies the GT predicate on the "update_by" field.
func UpdateByGT(v uint32) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldUpdateBy, v))
}

// UpdateByGTE applies the GTE predicate on the "update_by" field.
func UpdateByGTE(v uint32) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldUpdateBy, v))
}

// UpdateByLT applies the LT predicate on the "update_by" field.
func UpdateByLT(v uint32) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldUpdateBy, v))
}

// UpdateByLTE applies the LTE predicate on the "update_by" field.
func UpdateByLTE(v uint32) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldUpdateBy, v))
}

// UpdateByIsNil applies the IsNil predicate on the "update_by" field.
func UpdateByIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldUpdateBy))
}

// UpdateByNotNil applies the NotNil predicate on the "update_by" field.
func UpdateByNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldUpdateBy))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v uint32) predicate.Api {
	return predicate.Api(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v uint32) predicate.Api {
	return predicate.Api(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...uint32) predicate.Api {
	return predicate.Api(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...uint32) predicate.Api {
	return predicate.Api(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v uint32) predicate.Api {
	return predicate.Api(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v uint32) predicate.Api {
	return predicate.Api(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v uint32) predicate.Api {
	return predicate.Api(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v uint32) predicate.Api {
	return predicate.Api(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Api {
	return predicate.Api(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Api {
	return predicate.Api(sql.FieldNotNull(FieldDeletedBy))
}

// HasStatistics applies the HasEdge predicate on the "statistics" edge.
func HasStatistics() predicate.Api {
	return predicate.Api(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatisticsTable, StatisticsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatisticsWith applies the HasEdge predicate on the "statistics" edge with a given conditions (other predicates).
func HasStatisticsWith(preds ...predicate.ApiStatistics) predicate.Api {
	return predicate.Api(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatisticsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, StatisticsTable, StatisticsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Api) predicate.Api {
	return predicate.Api(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Api) predicate.Api {
	return predicate.Api(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Api) predicate.Api {
	return predicate.Api(func(s *sql.Selector) {
		p(s.Not())
	})
}
