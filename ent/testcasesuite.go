// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"galileo/ent/testcasesuite"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// TestCaseSuite is the model entity for the TestCaseSuite schema.
type TestCaseSuite struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uint32 `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TestCaseSuiteQuery when eager-loading is set.
	Edges               TestCaseSuiteEdges `json:"edges"`
	task_testcase_suite *int64
}

// TestCaseSuiteEdges holds the relations/edges for other nodes in the graph.
type TestCaseSuiteEdges struct {
	// Testcase holds the value of the testcase edge.
	Testcase []*TestCase `json:"testcase,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TestcaseOrErr returns the Testcase value or an error if the edge
// was not loaded in eager-loading.
func (e TestCaseSuiteEdges) TestcaseOrErr() ([]*TestCase, error) {
	if e.loadedTypes[0] {
		return e.Testcase, nil
	}
	return nil, &NotLoadedError{edge: "testcase"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestCaseSuite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case testcasesuite.FieldID, testcasesuite.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case testcasesuite.FieldName:
			values[i] = new(sql.NullString)
		case testcasesuite.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case testcasesuite.ForeignKeys[0]: // task_testcase_suite
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestCaseSuite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestCaseSuite fields.
func (tcs *TestCaseSuite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testcasesuite.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tcs.ID = int(value.Int64)
		case testcasesuite.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tcs.Name = value.String
			}
		case testcasesuite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tcs.CreatedAt = value.Time
			}
		case testcasesuite.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tcs.CreatedBy = uint32(value.Int64)
			}
		case testcasesuite.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field task_testcase_suite", value)
			} else if value.Valid {
				tcs.task_testcase_suite = new(int64)
				*tcs.task_testcase_suite = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryTestcase queries the "testcase" edge of the TestCaseSuite entity.
func (tcs *TestCaseSuite) QueryTestcase() *TestCaseQuery {
	return NewTestCaseSuiteClient(tcs.config).QueryTestcase(tcs)
}

// Update returns a builder for updating this TestCaseSuite.
// Note that you need to call TestCaseSuite.Unwrap() before calling this method if this TestCaseSuite
// was returned from a transaction, and the transaction was committed or rolled back.
func (tcs *TestCaseSuite) Update() *TestCaseSuiteUpdateOne {
	return NewTestCaseSuiteClient(tcs.config).UpdateOne(tcs)
}

// Unwrap unwraps the TestCaseSuite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tcs *TestCaseSuite) Unwrap() *TestCaseSuite {
	_tx, ok := tcs.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestCaseSuite is not a transactional entity")
	}
	tcs.config.driver = _tx.drv
	return tcs
}

// String implements the fmt.Stringer.
func (tcs *TestCaseSuite) String() string {
	var builder strings.Builder
	builder.WriteString("TestCaseSuite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tcs.ID))
	builder.WriteString("name=")
	builder.WriteString(tcs.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tcs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", tcs.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// TestCaseSuites is a parsable slice of TestCaseSuite.
type TestCaseSuites []*TestCaseSuite
