// Code generated by ent, DO NOT EDIT.

package apihistory

import (
	"galileo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLTE(FieldID, id))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldVersion, v))
}

// QueryParams applies equality check predicate on the "query_params" field. It's identical to QueryParamsEQ.
func QueryParams(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldQueryParams, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldDescription, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLTE(FieldVersion, v))
}

// QueryParamsEQ applies the EQ predicate on the "query_params" field.
func QueryParamsEQ(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldQueryParams, v))
}

// QueryParamsNEQ applies the NEQ predicate on the "query_params" field.
func QueryParamsNEQ(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNEQ(FieldQueryParams, v))
}

// QueryParamsIn applies the In predicate on the "query_params" field.
func QueryParamsIn(vs ...string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldIn(FieldQueryParams, vs...))
}

// QueryParamsNotIn applies the NotIn predicate on the "query_params" field.
func QueryParamsNotIn(vs ...string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNotIn(FieldQueryParams, vs...))
}

// QueryParamsGT applies the GT predicate on the "query_params" field.
func QueryParamsGT(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGT(FieldQueryParams, v))
}

// QueryParamsGTE applies the GTE predicate on the "query_params" field.
func QueryParamsGTE(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGTE(FieldQueryParams, v))
}

// QueryParamsLT applies the LT predicate on the "query_params" field.
func QueryParamsLT(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLT(FieldQueryParams, v))
}

// QueryParamsLTE applies the LTE predicate on the "query_params" field.
func QueryParamsLTE(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLTE(FieldQueryParams, v))
}

// QueryParamsContains applies the Contains predicate on the "query_params" field.
func QueryParamsContains(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldContains(FieldQueryParams, v))
}

// QueryParamsHasPrefix applies the HasPrefix predicate on the "query_params" field.
func QueryParamsHasPrefix(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldHasPrefix(FieldQueryParams, v))
}

// QueryParamsHasSuffix applies the HasSuffix predicate on the "query_params" field.
func QueryParamsHasSuffix(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldHasSuffix(FieldQueryParams, v))
}

// QueryParamsEqualFold applies the EqualFold predicate on the "query_params" field.
func QueryParamsEqualFold(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEqualFold(FieldQueryParams, v))
}

// QueryParamsContainsFold applies the ContainsFold predicate on the "query_params" field.
func QueryParamsContainsFold(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldContainsFold(FieldQueryParams, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uint32) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ApiHistory {
	return predicate.ApiHistory(sql.FieldContainsFold(FieldDescription, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiHistory) predicate.ApiHistory {
	return predicate.ApiHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiHistory) predicate.ApiHistory {
	return predicate.ApiHistory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiHistory) predicate.ApiHistory {
	return predicate.ApiHistory(func(s *sql.Selector) {
		p(s.Not())
	})
}
