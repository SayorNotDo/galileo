// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"galileo/ent/predicate"
	"galileo/ent/testcase"
	"galileo/ent/testcasesuite"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestCaseSuiteQuery is the builder for querying TestCaseSuite entities.
type TestCaseSuiteQuery struct {
	config
	ctx          *QueryContext
	order        []OrderFunc
	inters       []Interceptor
	predicates   []predicate.TestCaseSuite
	withTestcase *TestCaseQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TestCaseSuiteQuery builder.
func (tcsq *TestCaseSuiteQuery) Where(ps ...predicate.TestCaseSuite) *TestCaseSuiteQuery {
	tcsq.predicates = append(tcsq.predicates, ps...)
	return tcsq
}

// Limit the number of records to be returned by this query.
func (tcsq *TestCaseSuiteQuery) Limit(limit int) *TestCaseSuiteQuery {
	tcsq.ctx.Limit = &limit
	return tcsq
}

// Offset to start from.
func (tcsq *TestCaseSuiteQuery) Offset(offset int) *TestCaseSuiteQuery {
	tcsq.ctx.Offset = &offset
	return tcsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcsq *TestCaseSuiteQuery) Unique(unique bool) *TestCaseSuiteQuery {
	tcsq.ctx.Unique = &unique
	return tcsq
}

// Order specifies how the records should be ordered.
func (tcsq *TestCaseSuiteQuery) Order(o ...OrderFunc) *TestCaseSuiteQuery {
	tcsq.order = append(tcsq.order, o...)
	return tcsq
}

// QueryTestcase chains the current query on the "testcase" edge.
func (tcsq *TestCaseSuiteQuery) QueryTestcase() *TestCaseQuery {
	query := (&TestCaseClient{config: tcsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(testcasesuite.Table, testcasesuite.FieldID, selector),
			sqlgraph.To(testcase.Table, testcase.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, testcasesuite.TestcaseTable, testcasesuite.TestcaseColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TestCaseSuite entity from the query.
// Returns a *NotFoundError when no TestCaseSuite was found.
func (tcsq *TestCaseSuiteQuery) First(ctx context.Context) (*TestCaseSuite, error) {
	nodes, err := tcsq.Limit(1).All(setContextOp(ctx, tcsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{testcasesuite.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) FirstX(ctx context.Context) *TestCaseSuite {
	node, err := tcsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TestCaseSuite ID from the query.
// Returns a *NotFoundError when no TestCaseSuite ID was found.
func (tcsq *TestCaseSuiteQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tcsq.Limit(1).IDs(setContextOp(ctx, tcsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{testcasesuite.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) FirstIDX(ctx context.Context) int {
	id, err := tcsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TestCaseSuite entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TestCaseSuite entity is found.
// Returns a *NotFoundError when no TestCaseSuite entities are found.
func (tcsq *TestCaseSuiteQuery) Only(ctx context.Context) (*TestCaseSuite, error) {
	nodes, err := tcsq.Limit(2).All(setContextOp(ctx, tcsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{testcasesuite.Label}
	default:
		return nil, &NotSingularError{testcasesuite.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) OnlyX(ctx context.Context) *TestCaseSuite {
	node, err := tcsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TestCaseSuite ID in the query.
// Returns a *NotSingularError when more than one TestCaseSuite ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcsq *TestCaseSuiteQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tcsq.Limit(2).IDs(setContextOp(ctx, tcsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{testcasesuite.Label}
	default:
		err = &NotSingularError{testcasesuite.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) OnlyIDX(ctx context.Context) int {
	id, err := tcsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TestCaseSuites.
func (tcsq *TestCaseSuiteQuery) All(ctx context.Context) ([]*TestCaseSuite, error) {
	ctx = setContextOp(ctx, tcsq.ctx, "All")
	if err := tcsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TestCaseSuite, *TestCaseSuiteQuery]()
	return withInterceptors[[]*TestCaseSuite](ctx, tcsq, qr, tcsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) AllX(ctx context.Context) []*TestCaseSuite {
	nodes, err := tcsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TestCaseSuite IDs.
func (tcsq *TestCaseSuiteQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tcsq.ctx.Unique == nil && tcsq.path != nil {
		tcsq.Unique(true)
	}
	ctx = setContextOp(ctx, tcsq.ctx, "IDs")
	if err = tcsq.Select(testcasesuite.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) IDsX(ctx context.Context) []int {
	ids, err := tcsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcsq *TestCaseSuiteQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcsq.ctx, "Count")
	if err := tcsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcsq, querierCount[*TestCaseSuiteQuery](), tcsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) CountX(ctx context.Context) int {
	count, err := tcsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcsq *TestCaseSuiteQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcsq.ctx, "Exist")
	switch _, err := tcsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcsq *TestCaseSuiteQuery) ExistX(ctx context.Context) bool {
	exist, err := tcsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TestCaseSuiteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcsq *TestCaseSuiteQuery) Clone() *TestCaseSuiteQuery {
	if tcsq == nil {
		return nil
	}
	return &TestCaseSuiteQuery{
		config:       tcsq.config,
		ctx:          tcsq.ctx.Clone(),
		order:        append([]OrderFunc{}, tcsq.order...),
		inters:       append([]Interceptor{}, tcsq.inters...),
		predicates:   append([]predicate.TestCaseSuite{}, tcsq.predicates...),
		withTestcase: tcsq.withTestcase.Clone(),
		// clone intermediate query.
		sql:  tcsq.sql.Clone(),
		path: tcsq.path,
	}
}

// WithTestcase tells the query-builder to eager-load the nodes that are connected to
// the "testcase" edge. The optional arguments are used to configure the query builder of the edge.
func (tcsq *TestCaseSuiteQuery) WithTestcase(opts ...func(*TestCaseQuery)) *TestCaseSuiteQuery {
	query := (&TestCaseClient{config: tcsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcsq.withTestcase = query
	return tcsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TestCaseSuite.Query().
//		GroupBy(testcasesuite.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tcsq *TestCaseSuiteQuery) GroupBy(field string, fields ...string) *TestCaseSuiteGroupBy {
	tcsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TestCaseSuiteGroupBy{build: tcsq}
	grbuild.flds = &tcsq.ctx.Fields
	grbuild.label = testcasesuite.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.TestCaseSuite.Query().
//		Select(testcasesuite.FieldName).
//		Scan(ctx, &v)
func (tcsq *TestCaseSuiteQuery) Select(fields ...string) *TestCaseSuiteSelect {
	tcsq.ctx.Fields = append(tcsq.ctx.Fields, fields...)
	sbuild := &TestCaseSuiteSelect{TestCaseSuiteQuery: tcsq}
	sbuild.label = testcasesuite.Label
	sbuild.flds, sbuild.scan = &tcsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TestCaseSuiteSelect configured with the given aggregations.
func (tcsq *TestCaseSuiteQuery) Aggregate(fns ...AggregateFunc) *TestCaseSuiteSelect {
	return tcsq.Select().Aggregate(fns...)
}

func (tcsq *TestCaseSuiteQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcsq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcsq.ctx.Fields {
		if !testcasesuite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tcsq.path != nil {
		prev, err := tcsq.path(ctx)
		if err != nil {
			return err
		}
		tcsq.sql = prev
	}
	return nil
}

func (tcsq *TestCaseSuiteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TestCaseSuite, error) {
	var (
		nodes       = []*TestCaseSuite{}
		withFKs     = tcsq.withFKs
		_spec       = tcsq.querySpec()
		loadedTypes = [1]bool{
			tcsq.withTestcase != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, testcasesuite.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TestCaseSuite).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TestCaseSuite{config: tcsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tcsq.withTestcase; query != nil {
		if err := tcsq.loadTestcase(ctx, query, nodes,
			func(n *TestCaseSuite) { n.Edges.Testcase = []*TestCase{} },
			func(n *TestCaseSuite, e *TestCase) { n.Edges.Testcase = append(n.Edges.Testcase, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tcsq *TestCaseSuiteQuery) loadTestcase(ctx context.Context, query *TestCaseQuery, nodes []*TestCaseSuite, init func(*TestCaseSuite), assign func(*TestCaseSuite, *TestCase)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*TestCaseSuite)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TestCase(func(s *sql.Selector) {
		s.Where(sql.InValues(testcasesuite.TestcaseColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.test_case_suite_testcase
		if fk == nil {
			return fmt.Errorf(`foreign-key "test_case_suite_testcase" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "test_case_suite_testcase" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tcsq *TestCaseSuiteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcsq.querySpec()
	_spec.Node.Columns = tcsq.ctx.Fields
	if len(tcsq.ctx.Fields) > 0 {
		_spec.Unique = tcsq.ctx.Unique != nil && *tcsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcsq.driver, _spec)
}

func (tcsq *TestCaseSuiteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(testcasesuite.Table, testcasesuite.Columns, sqlgraph.NewFieldSpec(testcasesuite.FieldID, field.TypeInt))
	_spec.From = tcsq.sql
	if unique := tcsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcsq.path != nil {
		_spec.Unique = true
	}
	if fields := tcsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testcasesuite.FieldID)
		for i := range fields {
			if fields[i] != testcasesuite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tcsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcsq *TestCaseSuiteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcsq.driver.Dialect())
	t1 := builder.Table(testcasesuite.Table)
	columns := tcsq.ctx.Fields
	if len(columns) == 0 {
		columns = testcasesuite.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcsq.sql != nil {
		selector = tcsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcsq.ctx.Unique != nil && *tcsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tcsq.predicates {
		p(selector)
	}
	for _, p := range tcsq.order {
		p(selector)
	}
	if offset := tcsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TestCaseSuiteGroupBy is the group-by builder for TestCaseSuite entities.
type TestCaseSuiteGroupBy struct {
	selector
	build *TestCaseSuiteQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcsgb *TestCaseSuiteGroupBy) Aggregate(fns ...AggregateFunc) *TestCaseSuiteGroupBy {
	tcsgb.fns = append(tcsgb.fns, fns...)
	return tcsgb
}

// Scan applies the selector query and scans the result into the given value.
func (tcsgb *TestCaseSuiteGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcsgb.build.ctx, "GroupBy")
	if err := tcsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestCaseSuiteQuery, *TestCaseSuiteGroupBy](ctx, tcsgb.build, tcsgb, tcsgb.build.inters, v)
}

func (tcsgb *TestCaseSuiteGroupBy) sqlScan(ctx context.Context, root *TestCaseSuiteQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcsgb.fns))
	for _, fn := range tcsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcsgb.flds)+len(tcsgb.fns))
		for _, f := range *tcsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TestCaseSuiteSelect is the builder for selecting fields of TestCaseSuite entities.
type TestCaseSuiteSelect struct {
	*TestCaseSuiteQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcss *TestCaseSuiteSelect) Aggregate(fns ...AggregateFunc) *TestCaseSuiteSelect {
	tcss.fns = append(tcss.fns, fns...)
	return tcss
}

// Scan applies the selector query and scans the result into the given value.
func (tcss *TestCaseSuiteSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcss.ctx, "Select")
	if err := tcss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TestCaseSuiteQuery, *TestCaseSuiteSelect](ctx, tcss.TestCaseSuiteQuery, tcss, tcss.inters, v)
}

func (tcss *TestCaseSuiteSelect) sqlScan(ctx context.Context, root *TestCaseSuiteQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcss.fns))
	for _, fn := range tcss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
