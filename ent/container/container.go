// Code generated by ent, DO NOT EDIT.

package container

const (
	// Label holds the string label denoting the container type in the database.
	Label = "container"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldDomainname holds the string denoting the domainname field in the database.
	FieldDomainname = "domainname"
	// FieldUser holds the string denoting the user field in the database.
	FieldUser = "user"
	// FieldEnv holds the string denoting the env field in the database.
	FieldEnv = "env"
	// FieldCmd holds the string denoting the cmd field in the database.
	FieldCmd = "cmd"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldVolumes holds the string denoting the volumes field in the database.
	FieldVolumes = "volumes"
	// FieldWorkingDir holds the string denoting the working_dir field in the database.
	FieldWorkingDir = "working_dir"
	// FieldEntrypoint holds the string denoting the entrypoint field in the database.
	FieldEntrypoint = "entrypoint"
	// FieldMACAddress holds the string denoting the mac_address field in the database.
	FieldMACAddress = "mac_address"
	// FieldExposePorts holds the string denoting the expose_ports field in the database.
	FieldExposePorts = "expose_ports"
	// FieldComposeFileURL holds the string denoting the compose_file_url field in the database.
	FieldComposeFileURL = "compose_file_url"
	// FieldDockerfileURL holds the string denoting the dockerfile_url field in the database.
	FieldDockerfileURL = "dockerfile_url"
	// Table holds the table name of the container in the database.
	Table = "container"
)

// Columns holds all SQL columns for container fields.
var Columns = []string{
	FieldID,
	FieldHostname,
	FieldDomainname,
	FieldUser,
	FieldEnv,
	FieldCmd,
	FieldImage,
	FieldLabels,
	FieldVolumes,
	FieldWorkingDir,
	FieldEntrypoint,
	FieldMACAddress,
	FieldExposePorts,
	FieldComposeFileURL,
	FieldDockerfileURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// HostnameValidator is a validator for the "hostname" field. It is called by the builders before save.
	HostnameValidator func(string) error
	// DomainnameValidator is a validator for the "domainname" field. It is called by the builders before save.
	DomainnameValidator func(string) error
	// ImageValidator is a validator for the "image" field. It is called by the builders before save.
	ImageValidator func(string) error
	// MACAddressValidator is a validator for the "mac_address" field. It is called by the builders before save.
	MACAddressValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
