// Code generated by ent, DO NOT EDIT.

package container

import (
	"galileo/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldID, id))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldHostname, v))
}

// Domainname applies equality check predicate on the "domainname" field. It's identical to DomainnameEQ.
func Domainname(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldDomainname, v))
}

// User applies equality check predicate on the "user" field. It's identical to UserEQ.
func User(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldUser, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldImage, v))
}

// WorkingDir applies equality check predicate on the "working_dir" field. It's identical to WorkingDirEQ.
func WorkingDir(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldWorkingDir, v))
}

// MACAddress applies equality check predicate on the "mac_address" field. It's identical to MACAddressEQ.
func MACAddress(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldMACAddress, v))
}

// ComposeFileURL applies equality check predicate on the "compose_file_url" field. It's identical to ComposeFileURLEQ.
func ComposeFileURL(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldComposeFileURL, v))
}

// DockerfileURL applies equality check predicate on the "dockerfile_url" field. It's identical to DockerfileURLEQ.
func DockerfileURL(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldDockerfileURL, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldHostname, v))
}

// DomainnameEQ applies the EQ predicate on the "domainname" field.
func DomainnameEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldDomainname, v))
}

// DomainnameNEQ applies the NEQ predicate on the "domainname" field.
func DomainnameNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldDomainname, v))
}

// DomainnameIn applies the In predicate on the "domainname" field.
func DomainnameIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldDomainname, vs...))
}

// DomainnameNotIn applies the NotIn predicate on the "domainname" field.
func DomainnameNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldDomainname, vs...))
}

// DomainnameGT applies the GT predicate on the "domainname" field.
func DomainnameGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldDomainname, v))
}

// DomainnameGTE applies the GTE predicate on the "domainname" field.
func DomainnameGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldDomainname, v))
}

// DomainnameLT applies the LT predicate on the "domainname" field.
func DomainnameLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldDomainname, v))
}

// DomainnameLTE applies the LTE predicate on the "domainname" field.
func DomainnameLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldDomainname, v))
}

// DomainnameContains applies the Contains predicate on the "domainname" field.
func DomainnameContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldDomainname, v))
}

// DomainnameHasPrefix applies the HasPrefix predicate on the "domainname" field.
func DomainnameHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldDomainname, v))
}

// DomainnameHasSuffix applies the HasSuffix predicate on the "domainname" field.
func DomainnameHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldDomainname, v))
}

// DomainnameEqualFold applies the EqualFold predicate on the "domainname" field.
func DomainnameEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldDomainname, v))
}

// DomainnameContainsFold applies the ContainsFold predicate on the "domainname" field.
func DomainnameContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldDomainname, v))
}

// UserEQ applies the EQ predicate on the "user" field.
func UserEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldUser, v))
}

// UserNEQ applies the NEQ predicate on the "user" field.
func UserNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldUser, v))
}

// UserIn applies the In predicate on the "user" field.
func UserIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldUser, vs...))
}

// UserNotIn applies the NotIn predicate on the "user" field.
func UserNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldUser, vs...))
}

// UserGT applies the GT predicate on the "user" field.
func UserGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldUser, v))
}

// UserGTE applies the GTE predicate on the "user" field.
func UserGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldUser, v))
}

// UserLT applies the LT predicate on the "user" field.
func UserLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldUser, v))
}

// UserLTE applies the LTE predicate on the "user" field.
func UserLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldUser, v))
}

// UserContains applies the Contains predicate on the "user" field.
func UserContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldUser, v))
}

// UserHasPrefix applies the HasPrefix predicate on the "user" field.
func UserHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldUser, v))
}

// UserHasSuffix applies the HasSuffix predicate on the "user" field.
func UserHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldUser, v))
}

// UserIsNil applies the IsNil predicate on the "user" field.
func UserIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldUser))
}

// UserNotNil applies the NotNil predicate on the "user" field.
func UserNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldUser))
}

// UserEqualFold applies the EqualFold predicate on the "user" field.
func UserEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldUser, v))
}

// UserContainsFold applies the ContainsFold predicate on the "user" field.
func UserContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldUser, v))
}

// EnvIsNil applies the IsNil predicate on the "env" field.
func EnvIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldEnv))
}

// EnvNotNil applies the NotNil predicate on the "env" field.
func EnvNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldEnv))
}

// CmdIsNil applies the IsNil predicate on the "cmd" field.
func CmdIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldCmd))
}

// CmdNotNil applies the NotNil predicate on the "cmd" field.
func CmdNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldCmd))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldImage, v))
}

// LabelsIsNil applies the IsNil predicate on the "labels" field.
func LabelsIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldLabels))
}

// LabelsNotNil applies the NotNil predicate on the "labels" field.
func LabelsNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldLabels))
}

// VolumesIsNil applies the IsNil predicate on the "volumes" field.
func VolumesIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldVolumes))
}

// VolumesNotNil applies the NotNil predicate on the "volumes" field.
func VolumesNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldVolumes))
}

// WorkingDirEQ applies the EQ predicate on the "working_dir" field.
func WorkingDirEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldWorkingDir, v))
}

// WorkingDirNEQ applies the NEQ predicate on the "working_dir" field.
func WorkingDirNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldWorkingDir, v))
}

// WorkingDirIn applies the In predicate on the "working_dir" field.
func WorkingDirIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldWorkingDir, vs...))
}

// WorkingDirNotIn applies the NotIn predicate on the "working_dir" field.
func WorkingDirNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldWorkingDir, vs...))
}

// WorkingDirGT applies the GT predicate on the "working_dir" field.
func WorkingDirGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldWorkingDir, v))
}

// WorkingDirGTE applies the GTE predicate on the "working_dir" field.
func WorkingDirGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldWorkingDir, v))
}

// WorkingDirLT applies the LT predicate on the "working_dir" field.
func WorkingDirLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldWorkingDir, v))
}

// WorkingDirLTE applies the LTE predicate on the "working_dir" field.
func WorkingDirLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldWorkingDir, v))
}

// WorkingDirContains applies the Contains predicate on the "working_dir" field.
func WorkingDirContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldWorkingDir, v))
}

// WorkingDirHasPrefix applies the HasPrefix predicate on the "working_dir" field.
func WorkingDirHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldWorkingDir, v))
}

// WorkingDirHasSuffix applies the HasSuffix predicate on the "working_dir" field.
func WorkingDirHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldWorkingDir, v))
}

// WorkingDirIsNil applies the IsNil predicate on the "working_dir" field.
func WorkingDirIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldWorkingDir))
}

// WorkingDirNotNil applies the NotNil predicate on the "working_dir" field.
func WorkingDirNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldWorkingDir))
}

// WorkingDirEqualFold applies the EqualFold predicate on the "working_dir" field.
func WorkingDirEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldWorkingDir, v))
}

// WorkingDirContainsFold applies the ContainsFold predicate on the "working_dir" field.
func WorkingDirContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldWorkingDir, v))
}

// EntrypointIsNil applies the IsNil predicate on the "entrypoint" field.
func EntrypointIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldEntrypoint))
}

// EntrypointNotNil applies the NotNil predicate on the "entrypoint" field.
func EntrypointNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldEntrypoint))
}

// MACAddressEQ applies the EQ predicate on the "mac_address" field.
func MACAddressEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldMACAddress, v))
}

// MACAddressNEQ applies the NEQ predicate on the "mac_address" field.
func MACAddressNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldMACAddress, v))
}

// MACAddressIn applies the In predicate on the "mac_address" field.
func MACAddressIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldMACAddress, vs...))
}

// MACAddressNotIn applies the NotIn predicate on the "mac_address" field.
func MACAddressNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldMACAddress, vs...))
}

// MACAddressGT applies the GT predicate on the "mac_address" field.
func MACAddressGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldMACAddress, v))
}

// MACAddressGTE applies the GTE predicate on the "mac_address" field.
func MACAddressGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldMACAddress, v))
}

// MACAddressLT applies the LT predicate on the "mac_address" field.
func MACAddressLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldMACAddress, v))
}

// MACAddressLTE applies the LTE predicate on the "mac_address" field.
func MACAddressLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldMACAddress, v))
}

// MACAddressContains applies the Contains predicate on the "mac_address" field.
func MACAddressContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldMACAddress, v))
}

// MACAddressHasPrefix applies the HasPrefix predicate on the "mac_address" field.
func MACAddressHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldMACAddress, v))
}

// MACAddressHasSuffix applies the HasSuffix predicate on the "mac_address" field.
func MACAddressHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldMACAddress, v))
}

// MACAddressEqualFold applies the EqualFold predicate on the "mac_address" field.
func MACAddressEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldMACAddress, v))
}

// MACAddressContainsFold applies the ContainsFold predicate on the "mac_address" field.
func MACAddressContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldMACAddress, v))
}

// ExposePortsIsNil applies the IsNil predicate on the "expose_ports" field.
func ExposePortsIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldExposePorts))
}

// ExposePortsNotNil applies the NotNil predicate on the "expose_ports" field.
func ExposePortsNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldExposePorts))
}

// ComposeFileURLEQ applies the EQ predicate on the "compose_file_url" field.
func ComposeFileURLEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldComposeFileURL, v))
}

// ComposeFileURLNEQ applies the NEQ predicate on the "compose_file_url" field.
func ComposeFileURLNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldComposeFileURL, v))
}

// ComposeFileURLIn applies the In predicate on the "compose_file_url" field.
func ComposeFileURLIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldComposeFileURL, vs...))
}

// ComposeFileURLNotIn applies the NotIn predicate on the "compose_file_url" field.
func ComposeFileURLNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldComposeFileURL, vs...))
}

// ComposeFileURLGT applies the GT predicate on the "compose_file_url" field.
func ComposeFileURLGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldComposeFileURL, v))
}

// ComposeFileURLGTE applies the GTE predicate on the "compose_file_url" field.
func ComposeFileURLGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldComposeFileURL, v))
}

// ComposeFileURLLT applies the LT predicate on the "compose_file_url" field.
func ComposeFileURLLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldComposeFileURL, v))
}

// ComposeFileURLLTE applies the LTE predicate on the "compose_file_url" field.
func ComposeFileURLLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldComposeFileURL, v))
}

// ComposeFileURLContains applies the Contains predicate on the "compose_file_url" field.
func ComposeFileURLContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldComposeFileURL, v))
}

// ComposeFileURLHasPrefix applies the HasPrefix predicate on the "compose_file_url" field.
func ComposeFileURLHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldComposeFileURL, v))
}

// ComposeFileURLHasSuffix applies the HasSuffix predicate on the "compose_file_url" field.
func ComposeFileURLHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldComposeFileURL, v))
}

// ComposeFileURLIsNil applies the IsNil predicate on the "compose_file_url" field.
func ComposeFileURLIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldComposeFileURL))
}

// ComposeFileURLNotNil applies the NotNil predicate on the "compose_file_url" field.
func ComposeFileURLNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldComposeFileURL))
}

// ComposeFileURLEqualFold applies the EqualFold predicate on the "compose_file_url" field.
func ComposeFileURLEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldComposeFileURL, v))
}

// ComposeFileURLContainsFold applies the ContainsFold predicate on the "compose_file_url" field.
func ComposeFileURLContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldComposeFileURL, v))
}

// DockerfileURLEQ applies the EQ predicate on the "dockerfile_url" field.
func DockerfileURLEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldEQ(FieldDockerfileURL, v))
}

// DockerfileURLNEQ applies the NEQ predicate on the "dockerfile_url" field.
func DockerfileURLNEQ(v string) predicate.Container {
	return predicate.Container(sql.FieldNEQ(FieldDockerfileURL, v))
}

// DockerfileURLIn applies the In predicate on the "dockerfile_url" field.
func DockerfileURLIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldIn(FieldDockerfileURL, vs...))
}

// DockerfileURLNotIn applies the NotIn predicate on the "dockerfile_url" field.
func DockerfileURLNotIn(vs ...string) predicate.Container {
	return predicate.Container(sql.FieldNotIn(FieldDockerfileURL, vs...))
}

// DockerfileURLGT applies the GT predicate on the "dockerfile_url" field.
func DockerfileURLGT(v string) predicate.Container {
	return predicate.Container(sql.FieldGT(FieldDockerfileURL, v))
}

// DockerfileURLGTE applies the GTE predicate on the "dockerfile_url" field.
func DockerfileURLGTE(v string) predicate.Container {
	return predicate.Container(sql.FieldGTE(FieldDockerfileURL, v))
}

// DockerfileURLLT applies the LT predicate on the "dockerfile_url" field.
func DockerfileURLLT(v string) predicate.Container {
	return predicate.Container(sql.FieldLT(FieldDockerfileURL, v))
}

// DockerfileURLLTE applies the LTE predicate on the "dockerfile_url" field.
func DockerfileURLLTE(v string) predicate.Container {
	return predicate.Container(sql.FieldLTE(FieldDockerfileURL, v))
}

// DockerfileURLContains applies the Contains predicate on the "dockerfile_url" field.
func DockerfileURLContains(v string) predicate.Container {
	return predicate.Container(sql.FieldContains(FieldDockerfileURL, v))
}

// DockerfileURLHasPrefix applies the HasPrefix predicate on the "dockerfile_url" field.
func DockerfileURLHasPrefix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasPrefix(FieldDockerfileURL, v))
}

// DockerfileURLHasSuffix applies the HasSuffix predicate on the "dockerfile_url" field.
func DockerfileURLHasSuffix(v string) predicate.Container {
	return predicate.Container(sql.FieldHasSuffix(FieldDockerfileURL, v))
}

// DockerfileURLIsNil applies the IsNil predicate on the "dockerfile_url" field.
func DockerfileURLIsNil() predicate.Container {
	return predicate.Container(sql.FieldIsNull(FieldDockerfileURL))
}

// DockerfileURLNotNil applies the NotNil predicate on the "dockerfile_url" field.
func DockerfileURLNotNil() predicate.Container {
	return predicate.Container(sql.FieldNotNull(FieldDockerfileURL))
}

// DockerfileURLEqualFold applies the EqualFold predicate on the "dockerfile_url" field.
func DockerfileURLEqualFold(v string) predicate.Container {
	return predicate.Container(sql.FieldEqualFold(FieldDockerfileURL, v))
}

// DockerfileURLContainsFold applies the ContainsFold predicate on the "dockerfile_url" field.
func DockerfileURLContainsFold(v string) predicate.Container {
	return predicate.Container(sql.FieldContainsFold(FieldDockerfileURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Container) predicate.Container {
	return predicate.Container(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Container) predicate.Container {
	return predicate.Container(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Container) predicate.Container {
	return predicate.Container(func(s *sql.Selector) {
		p(s.Not())
	})
}
