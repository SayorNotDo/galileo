// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/management/v1/management.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Management_BaseInformation_FullMethodName = "/api.management.v1.Management/BaseInformation"
	Management_CreateTestPlan_FullMethodName  = "/api.management.v1.Management/CreateTestPlan"
	Management_UpdateTestPlan_FullMethodName  = "/api.management.v1.Management/UpdateTestPlan"
	Management_GetTestPlaById_FullMethodName  = "/api.management.v1.Management/GetTestPlaById"
)

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	BaseInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BaseInfoReply, error)
	CreateTestPlan(ctx context.Context, in *CreateTestPlanRequest, opts ...grpc.CallOption) (*CreateTestPlanReply, error)
	UpdateTestPlan(ctx context.Context, in *UpdateTestPlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTestPlaById(ctx context.Context, in *GetTestPlanRequest, opts ...grpc.CallOption) (*GetTestPlanReply, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) BaseInformation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BaseInfoReply, error) {
	out := new(BaseInfoReply)
	err := c.cc.Invoke(ctx, Management_BaseInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) CreateTestPlan(ctx context.Context, in *CreateTestPlanRequest, opts ...grpc.CallOption) (*CreateTestPlanReply, error) {
	out := new(CreateTestPlanReply)
	err := c.cc.Invoke(ctx, Management_CreateTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) UpdateTestPlan(ctx context.Context, in *UpdateTestPlanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Management_UpdateTestPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) GetTestPlaById(ctx context.Context, in *GetTestPlanRequest, opts ...grpc.CallOption) (*GetTestPlanReply, error) {
	out := new(GetTestPlanReply)
	err := c.cc.Invoke(ctx, Management_GetTestPlaById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	BaseInformation(context.Context, *emptypb.Empty) (*BaseInfoReply, error)
	CreateTestPlan(context.Context, *CreateTestPlanRequest) (*CreateTestPlanReply, error)
	UpdateTestPlan(context.Context, *UpdateTestPlanRequest) (*emptypb.Empty, error)
	GetTestPlaById(context.Context, *GetTestPlanRequest) (*GetTestPlanReply, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) BaseInformation(context.Context, *emptypb.Empty) (*BaseInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BaseInformation not implemented")
}
func (UnimplementedManagementServer) CreateTestPlan(context.Context, *CreateTestPlanRequest) (*CreateTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestPlan not implemented")
}
func (UnimplementedManagementServer) UpdateTestPlan(context.Context, *UpdateTestPlanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestPlan not implemented")
}
func (UnimplementedManagementServer) GetTestPlaById(context.Context, *GetTestPlanRequest) (*GetTestPlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestPlaById not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_BaseInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).BaseInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_BaseInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).BaseInformation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_CreateTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).CreateTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_CreateTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).CreateTestPlan(ctx, req.(*CreateTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_UpdateTestPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).UpdateTestPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_UpdateTestPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).UpdateTestPlan(ctx, req.(*UpdateTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_GetTestPlaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).GetTestPlaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Management_GetTestPlaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).GetTestPlaById(ctx, req.(*GetTestPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.management.v1.Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BaseInformation",
			Handler:    _Management_BaseInformation_Handler,
		},
		{
			MethodName: "CreateTestPlan",
			Handler:    _Management_CreateTestPlan_Handler,
		},
		{
			MethodName: "UpdateTestPlan",
			Handler:    _Management_UpdateTestPlan_Handler,
		},
		{
			MethodName: "GetTestPlaById",
			Handler:    _Management_GetTestPlaById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/management/v1/management.proto",
}
