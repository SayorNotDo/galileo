// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.7
// source: api/management/api/v1/api.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationApiCreateApi = "/api.management.api.Api/CreateApi"

type ApiHTTPServer interface {
	CreateApi(context.Context, *CreateApiRequest) (*CreateApiReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.POST("v1/api/management/target", _Api_CreateApi0_HTTP_Handler(srv))
}

func _Api_CreateApi0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApiCreateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateApiReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	CreateApi(ctx context.Context, req *CreateApiRequest, opts ...http.CallOption) (rsp *CreateApiReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiRequest, opts ...http.CallOption) (*CreateApiReply, error) {
	var out CreateApiReply
	pattern := "v1/api/management/target"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApiCreateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
