// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: api/management/testcase/v1/testcase.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Testcase_CreateTestcase_FullMethodName  = "/api.management.testcase.Testcase/CreateTestcase"
	Testcase_UpdateTestcase_FullMethodName  = "/api.management.testcase.Testcase/UpdateTestcase"
	Testcase_DeleteTestcase_FullMethodName  = "/api.management.testcase.Testcase/DeleteTestcase"
	Testcase_GetTestcaseById_FullMethodName = "/api.management.testcase.Testcase/GetTestcaseById"
	Testcase_ListTestcase_FullMethodName    = "/api.management.testcase.Testcase/ListTestcase"
)

// TestcaseClient is the client API for Testcase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestcaseClient interface {
	CreateTestcase(ctx context.Context, in *CreateTestcaseRequest, opts ...grpc.CallOption) (*CreateTestcaseReply, error)
	UpdateTestcase(ctx context.Context, in *UpdateTestcaseRequest, opts ...grpc.CallOption) (*UpdateTestcaseReply, error)
	DeleteTestcase(ctx context.Context, in *DeleteTestcaseRequest, opts ...grpc.CallOption) (*DeleteTestcaseReply, error)
	GetTestcaseById(ctx context.Context, in *GetTestcaseRequest, opts ...grpc.CallOption) (*GetTestcaseReply, error)
	ListTestcase(ctx context.Context, in *ListTestcaseRequest, opts ...grpc.CallOption) (*ListTestcaseReply, error)
}

type testcaseClient struct {
	cc grpc.ClientConnInterface
}

func NewTestcaseClient(cc grpc.ClientConnInterface) TestcaseClient {
	return &testcaseClient{cc}
}

func (c *testcaseClient) CreateTestcase(ctx context.Context, in *CreateTestcaseRequest, opts ...grpc.CallOption) (*CreateTestcaseReply, error) {
	out := new(CreateTestcaseReply)
	err := c.cc.Invoke(ctx, Testcase_CreateTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testcaseClient) UpdateTestcase(ctx context.Context, in *UpdateTestcaseRequest, opts ...grpc.CallOption) (*UpdateTestcaseReply, error) {
	out := new(UpdateTestcaseReply)
	err := c.cc.Invoke(ctx, Testcase_UpdateTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testcaseClient) DeleteTestcase(ctx context.Context, in *DeleteTestcaseRequest, opts ...grpc.CallOption) (*DeleteTestcaseReply, error) {
	out := new(DeleteTestcaseReply)
	err := c.cc.Invoke(ctx, Testcase_DeleteTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testcaseClient) GetTestcaseById(ctx context.Context, in *GetTestcaseRequest, opts ...grpc.CallOption) (*GetTestcaseReply, error) {
	out := new(GetTestcaseReply)
	err := c.cc.Invoke(ctx, Testcase_GetTestcaseById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testcaseClient) ListTestcase(ctx context.Context, in *ListTestcaseRequest, opts ...grpc.CallOption) (*ListTestcaseReply, error) {
	out := new(ListTestcaseReply)
	err := c.cc.Invoke(ctx, Testcase_ListTestcase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestcaseServer is the server API for Testcase service.
// All implementations must embed UnimplementedTestcaseServer
// for forward compatibility
type TestcaseServer interface {
	CreateTestcase(context.Context, *CreateTestcaseRequest) (*CreateTestcaseReply, error)
	UpdateTestcase(context.Context, *UpdateTestcaseRequest) (*UpdateTestcaseReply, error)
	DeleteTestcase(context.Context, *DeleteTestcaseRequest) (*DeleteTestcaseReply, error)
	GetTestcaseById(context.Context, *GetTestcaseRequest) (*GetTestcaseReply, error)
	ListTestcase(context.Context, *ListTestcaseRequest) (*ListTestcaseReply, error)
	mustEmbedUnimplementedTestcaseServer()
}

// UnimplementedTestcaseServer must be embedded to have forward compatible implementations.
type UnimplementedTestcaseServer struct {
}

func (UnimplementedTestcaseServer) CreateTestcase(context.Context, *CreateTestcaseRequest) (*CreateTestcaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestcase not implemented")
}
func (UnimplementedTestcaseServer) UpdateTestcase(context.Context, *UpdateTestcaseRequest) (*UpdateTestcaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestcase not implemented")
}
func (UnimplementedTestcaseServer) DeleteTestcase(context.Context, *DeleteTestcaseRequest) (*DeleteTestcaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestcase not implemented")
}
func (UnimplementedTestcaseServer) GetTestcaseById(context.Context, *GetTestcaseRequest) (*GetTestcaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestcaseById not implemented")
}
func (UnimplementedTestcaseServer) ListTestcase(context.Context, *ListTestcaseRequest) (*ListTestcaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestcase not implemented")
}
func (UnimplementedTestcaseServer) mustEmbedUnimplementedTestcaseServer() {}

// UnsafeTestcaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestcaseServer will
// result in compilation errors.
type UnsafeTestcaseServer interface {
	mustEmbedUnimplementedTestcaseServer()
}

func RegisterTestcaseServer(s grpc.ServiceRegistrar, srv TestcaseServer) {
	s.RegisterService(&Testcase_ServiceDesc, srv)
}

func _Testcase_CreateTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServer).CreateTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Testcase_CreateTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServer).CreateTestcase(ctx, req.(*CreateTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testcase_UpdateTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServer).UpdateTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Testcase_UpdateTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServer).UpdateTestcase(ctx, req.(*UpdateTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testcase_DeleteTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServer).DeleteTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Testcase_DeleteTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServer).DeleteTestcase(ctx, req.(*DeleteTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testcase_GetTestcaseById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServer).GetTestcaseById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Testcase_GetTestcaseById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServer).GetTestcaseById(ctx, req.(*GetTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testcase_ListTestcase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestcaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestcaseServer).ListTestcase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Testcase_ListTestcase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestcaseServer).ListTestcase(ctx, req.(*ListTestcaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Testcase_ServiceDesc is the grpc.ServiceDesc for Testcase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Testcase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.management.testcase.Testcase",
	HandlerType: (*TestcaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestcase",
			Handler:    _Testcase_CreateTestcase_Handler,
		},
		{
			MethodName: "UpdateTestcase",
			Handler:    _Testcase_UpdateTestcase_Handler,
		},
		{
			MethodName: "DeleteTestcase",
			Handler:    _Testcase_DeleteTestcase_Handler,
		},
		{
			MethodName: "GetTestcaseById",
			Handler:    _Testcase_GetTestcaseById_Handler,
		},
		{
			MethodName: "ListTestcase",
			Handler:    _Testcase_ListTestcase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/management/testcase/v1/testcase.proto",
}
