// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.7
// source: api/engine/v1/engine.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEngineListEngine = "/api.engine.v1.Engine/ListEngine"

type EngineHTTPServer interface {
	ListEngine(context.Context, *ListEngineRequest) (*ListEngineReply, error)
}

func RegisterEngineHTTPServer(s *http.Server, srv EngineHTTPServer) {
	r := s.Route("/")
	r.GET("v1/api/hello", _Engine_ListEngine0_HTTP_Handler(srv))
}

func _Engine_ListEngine0_HTTP_Handler(srv EngineHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEngineRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEngineListEngine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListEngine(ctx, req.(*ListEngineRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEngineReply)
		return ctx.Result(200, reply)
	}
}

type EngineHTTPClient interface {
	ListEngine(ctx context.Context, req *ListEngineRequest, opts ...http.CallOption) (rsp *ListEngineReply, err error)
}

type EngineHTTPClientImpl struct {
	cc *http.Client
}

func NewEngineHTTPClient(client *http.Client) EngineHTTPClient {
	return &EngineHTTPClientImpl{client}
}

func (c *EngineHTTPClientImpl) ListEngine(ctx context.Context, in *ListEngineRequest, opts ...http.CallOption) (*ListEngineReply, error) {
	var out ListEngineReply
	pattern := "v1/api/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEngineListEngine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
